/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,15],$V2=[1,9],$V3=[1,4],$V4=[1,5],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,19],$Vb=[1,6],$Vc=[1,7],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,24],$Vi=[2,5,10,11,19,22,25,29,33,34,35,36,44,45,60,61,62,63,67],$Vj=[1,36],$Vk=[1,34],$Vl=[1,35],$Vm=[1,41],$Vn=[1,47],$Vo=[1,48],$Vp=[1,59],$Vq=[1,57],$Vr=[1,50],$Vs=[1,55],$Vt=[1,61],$Vu=[1,62],$Vv=[1,53],$Vw=[1,54],$Vx=[1,68],$Vy=[21,24,58],$Vz=[2,110],$VA=[13,21,46,50,51,52,53,54,58,72,73,76,77,78,79,80,81,84],$VB=[1,86],$VC=[1,82],$VD=[1,79],$VE=[1,83],$VF=[1,75],$VG=[1,107],$VH=[1,98],$VI=[1,95],$VJ=[1,96],$VK=[1,99],$VL=[1,100],$VM=[1,101],$VN=[1,102],$VO=[1,103],$VP=[1,108],$VQ=[1,109],$VR=[1,110],$VS=[1,116],$VT=[13,21,46,84],$VU=[1,117],$VV=[1,118],$VW=[1,119],$VX=[1,120],$VY=[1,121],$VZ=[13,21,46,58,72,73,76,77,78,79,80,81,84],$V_=[13,21,46,50,51,52,53,54,84],$V$=[1,129],$V01=[13,58],$V11=[1,139],$V21=[1,140],$V31=[1,143],$V41=[13,58,80,81],$V51=[13,21,58,80,81],$V61=[13,21,58,72,73,80,81],$V71=[13,21,58,72,73,76,77,78,79,80,81],$V81=[2,129],$V91=[1,150],$Va1=[1,151],$Vb1=[1,152],$Vc1=[1,153],$Vd1=[1,154],$Ve1=[1,155],$Vf1=[13,21,46,50,51,52,53,54,58,72,73,76,77,78,79,80,81],$Vg1=[2,5,10,11,19,22,25,28,29,32,33,34,35,36,44,45,60,61,62,63,64,65,66,67,83,85],$Vh1=[2,11,19,22,25,29,32,33,34,35,36,60,61,62,63,64,65,66,67,83,85],$Vi1=[2,10,11,19,22,25,29,32,33,34,35,36,60,61,62,63,64,65,66,67,83,85],$Vj1=[13,21,46,50,84],$Vk1=[2,10,11,19,22,25,29,32,33,34,35,36,60,61,62,63,64,65,66,67],$Vl1=[1,200],$Vm1=[1,219],$Vn1=[13,21,46,50,58,72,73,76,77,78,79,80,81],$Vo1=[2,130],$Vp1=[2,131],$Vq1=[1,251],$Vr1=[1,252],$Vs1=[1,277],$Vt1=[32,83,85],$Vu1=[80,81],$Vv1=[1,302];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"especiales_sentencias":7,"sentencia_especial":8,"sentencia":9,"RVOID":10,"IDENTIFICADOR":11,"PARIZQ":12,"PARDER":13,"bloque_sentencias":14,"RMAIN":15,"parametros_fun":16,"tipo_dato":17,"sentencias":18,"RPRINTLN":19,"expresion_cadena":20,"PTOCOMA":21,"RPRINT":22,"lista_id":23,"IGUAL":24,"RIF":25,"expresion_logica":26,"lista_else_if":27,"RELSE":28,"RSWITCH":29,"LLAVIZQ":30,"casos":31,"LLAVDER":32,"RWHILE":33,"RDO":34,"RFOR":35,"RINT":36,"expresion_numerica":37,"expresion_relacional":38,"INCREMENTO":39,"DECREMENTO":40,"incremento_decremento":41,"valor_transferencia":42,"llamada":43,"RCLASS":44,"RIMPORT":45,"MAS":46,"CADENA":47,"valor_booleano":48,"aux_expresion_cadena":49,"MENOS":50,"MULTIPLICACION":51,"DIVISION":52,"MODULO":53,"POTENCIA":54,"valor_numerico":55,"parametros":56,"expresion_numerica_par":57,"COMA":58,"parametro":59,"RDOUBLE":60,"RBOOLEAN":61,"RCHAR":62,"RSTRING":63,"RBREAK":64,"RRETURN":65,"RCONTINUE":66,"ENTERO":67,"DECIMAL":68,"RTRUE":69,"RFALSE":70,"expresion_may_men":71,"IGUALDAD":72,"DISTINTO":73,"NOT":74,"valores_expresion_relacional":75,"MAYOR":76,"MENOR":77,"MAYORIGUAL":78,"MENORIGUAL":79,"AND":80,"OR":81,"caso_eval":82,"RCASE":83,"DOSPTS":84,"RDEFAULT":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"RVOID",11:"IDENTIFICADOR",12:"PARIZQ",13:"PARDER",15:"RMAIN",19:"RPRINTLN",21:"PTOCOMA",22:"RPRINT",24:"IGUAL",25:"RIF",28:"RELSE",29:"RSWITCH",30:"LLAVIZQ",32:"LLAVDER",33:"RWHILE",34:"RDO",35:"RFOR",36:"RINT",39:"INCREMENTO",40:"DECREMENTO",44:"RCLASS",45:"RIMPORT",46:"MAS",47:"CADENA",50:"MENOS",51:"MULTIPLICACION",52:"DIVISION",53:"MODULO",54:"POTENCIA",58:"COMA",60:"RDOUBLE",61:"RBOOLEAN",62:"RCHAR",63:"RSTRING",64:"RBREAK",65:"RRETURN",66:"RCONTINUE",67:"ENTERO",68:"DECIMAL",69:"RTRUE",70:"RFALSE",72:"IGUALDAD",73:"DISTINTO",74:"NOT",76:"MAYOR",77:"MENOR",78:"MAYORIGUAL",79:"MENORIGUAL",80:"AND",81:"OR",83:"RCASE",84:"DOSPTS",85:"RDEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[8,1],[8,5],[8,5],[8,6],[8,5],[8,6],[18,2],[18,1],[9,5],[9,5],[9,3],[9,5],[9,4],[9,8],[9,6],[9,7],[9,5],[9,7],[9,5],[9,7],[9,13],[9,13],[9,12],[9,12],[9,2],[9,2],[9,2],[9,1],[6,5],[6,5],[6,5],[6,4],[6,3],[6,3],[6,5],[6,4],[6,8],[6,6],[6,7],[6,5],[6,7],[6,5],[6,7],[6,13],[6,13],[6,12],[6,12],[6,5],[6,5],[6,6],[6,5],[6,6],[6,2],[6,2],[6,1],[20,3],[20,1],[20,1],[20,1],[49,3],[49,3],[49,3],[49,3],[49,3],[49,2],[49,1],[49,3],[49,1],[49,1],[49,1],[43,3],[43,4],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,2],[57,1],[57,1],[57,1],[57,1],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,1],[37,1],[37,1],[37,1],[56,3],[56,1],[59,1],[17,1],[17,1],[17,1],[17,1],[17,1],[23,3],[23,1],[42,1],[42,2],[42,1],[55,1],[55,1],[48,1],[48,1],[38,3],[38,3],[38,2],[38,1],[71,3],[71,3],[71,3],[71,3],[71,1],[75,1],[75,1],[75,1],[26,3],[26,3],[26,6],[26,6],[26,1],[31,2],[31,1],[82,4],[82,3],[14,3],[14,2],[27,7],[27,6],[41,2],[41,2],[41,2],[41,2],[16,4],[16,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 12:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 5: case 13: case 110: case 136:
 this.$ = [$$[$0]]; 
break;
case 4:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 6:
 this.$ = $$[$0] 
break;
case 7: case 8: case 10: case 53: case 54: case 56:
 this.$ = instruccionesAPI.nuevaDeclaracionFun($$[$0-4],$$[$0-3],$$[$0]); 
break;
case 9: case 11: case 55: case 57:
 this.$ = instruccionesAPI.nuevaDeclaracionFunParametros($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 14: case 34:
 this.$ = instruccionesAPI.nuevoPrintln($$[$0-2]); 
break;
case 15: case 35:
 this.$ = instruccionesAPI.nuevoPrint($$[$0-2]); 
break;
case 16: case 39:
 this.$ = instruccionesAPI.nuevoDeclaracionVar($$[$0-1],$$[$0-2]); 
break;
case 17: case 40:
 this.$ = instruccionesAPI.nuevoDeclaracionVarValor($$[$0-3],$$[$0-4],$$[$0-1]); 
break;
case 18: case 41:
 this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3],$$[$0-1]); 
break;
case 19: case 42:
 this.$ = instruccionesAPI.nuevoIfElseListElseIf($$[$0-5],$$[$0-3],$$[$0],$$[$0-2]); 
break;
case 20: case 43:
 this.$ = instruccionesAPI.nuevoIfListElseIf($$[$0-3],$$[$0-1],$$[$0]); 
break;
case 21: case 44:
 this.$ = instruccionesAPI.nuevoElse($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 22: case 45:
 this.$ = instruccionesAPI.nuevoIf($$[$0-2],$$[$0]); 
break;
case 23: case 46:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]); 
break;
case 24: case 47:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-2],$$[$0]); 
break;
case 25: case 48:
 this.$ = instruccionesAPI.nuevoDoWhile($$[$0-2],$$[$0-5]); 
break;
case 26: case 27: case 28: case 29:
 this.$ = instruccionesAPI.nuevoFor($$[$0-9],$$[$0-7],$$[$0-5],$$[$0-2],$$[$0]); 
break;
case 30: case 31: case 32: case 58: case 59: case 72: case 95:
 this.$ = $$[$0-1]; 
break;
case 33: case 60:
 cErrores.errores.addError(new cNodoError.nodoError("Sintactico","No se esperaba el caracter: "+$$[$0],this._$.first_line,$$[$0])); this.$ = instruccionesAPI.nuevoError($$[$0]);
break;
case 36:
 this.$ = instruccionesAPI.nuevaClaseInstrucciones($$[$0-3],$$[$0-1]); 
break;
case 37:
 this.$ = instruccionesAPI.nuevaClase($$[$0-2]); 
break;
case 38:
 this.$ = instruccionesAPI.nuevoImport($$[$0-1]); 
break;
case 49: case 50: case 51: case 52:
 this.$ = instruccionesAPI.nuevoFor($$[$0-9],$$[$0-7],$$[$0-5],$$[$0-2],$$[$01]); 
break;
case 61: case 78: case 89:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA); 
break;
case 62:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.CADENA); 
break;
case 63: case 64: case 71: case 73: case 75: case 85: case 86: case 88: case 97: case 98: case 100: case 103: case 104: case 105: case 106: case 107: case 108: case 111: case 113: case 121: case 126: case 128: case 129: case 134:
 this.$ = $$[$0]; 
break;
case 65: case 79: case 90:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA); 
break;
case 66: case 80: case 91:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION); 
break;
case 67: case 81: case 92:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION); 
break;
case 68: case 82: case 93:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO); 
break;
case 69: case 83: case 94:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA); 
break;
case 70: case 84: case 96:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 74: case 87: case 99:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR); 
break;
case 76:
 this.$ = instruccionesAPI.nuevaInstanciaParametros($$[$0-2]); 
break;
case 77:
 this.$ = instruccionesAPI.nuevaInstancia($$[$0-3],$$[$0-1]); 
break;
case 101:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 102:
 this.$ = [$$[$0]]
break;
case 109:
 $$[$0-2].push($$[$0]);  this.$ = $$[$0-2]; 
break;
case 112:
 this.$ = instruccionesAPI.nuevoReturn($$[$0]); 
break;
case 114: case 115:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.NUMERO); 
break;
case 116: case 117:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.BOOLEAN); 
break;
case 118:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUALDAD); 
break;
case 119:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DISTINTO); 
break;
case 120:
 this.$ = instruccionesAPI.nuevaNegacion($$[$0]); 
break;
case 122:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 123:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 124:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 125:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 127:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 130:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND); 
break;
case 131:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR); 
break;
case 132:
 this.$ = instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.AND), TIPO_OPERACION.NOT); 
break;
case 133:
 this.$ = instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.OR), TIPO_OPERACION.NOT); 
break;
case 135:
 $$[$0-1].push($$[$0]); this.$ =$$[$0-1]; 
break;
case 137:
 this.$ = instruccionesAPI.nuevoCase($$[$0-2],$$[$0]); 
break;
case 138:
 this.$ = instruccionesAPI.nuevoDefault($$[$0]); 
break;
case 139:
 this.$ = instruccionesAPI.nuevoBloqueSentencias($$[$0-1]); 
break;
case 140:
 this.$ = instruccionesAPI.nuevoBloqueSentencias(undefined) 
break;
case 141:
 $$[$0-6].push(instruccionesAPI.nuevoIf($$[$0-2],$$[$0])); this.$ = $$[$0-6]; 
break;
case 142:
 this.$ = [instruccionesAPI.nuevoIf($$[$0-2],$$[$0])]; 
break;
case 143: case 145:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0-1],TIPO_OPERACION.INCREMENTO); 
break;
case 144: case 146:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0-1],TIPO_OPERACION.DECREMENTO); 
break;
case 147:
 $$[$0-3].push(instruccionesAPI.nuevoParametroFun($$[$0-1],$$[$0])); this.$ = $$[$0-3] 
break;
case 148:
 this.$ = [instruccionesAPI.nuevoParametroFun($$[$0-1],$$[$0])]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,10:$V1,11:$V2,17:8,19:$V3,22:$V4,25:$V5,29:$V6,33:$V7,34:$V8,35:$V9,36:$Va,41:16,43:17,44:$Vb,45:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,67:$Vh},{1:[3]},{2:$V0,5:[1,25],6:26,10:$V1,11:$V2,17:8,19:$V3,22:$V4,25:$V5,29:$V6,33:$V7,34:$V8,35:$V9,36:$Va,41:16,43:17,44:$Vb,45:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,67:$Vh},o($Vi,[2,3]),{12:[1,27]},{12:[1,28]},{11:[1,29]},{11:[1,30]},{11:[1,32],23:31},{12:$Vj,24:[1,33],39:$Vk,40:$Vl},{12:[1,37]},{12:[1,38]},{12:[1,39]},{14:40,30:$Vm},{12:[1,42]},{11:[1,43],15:[1,44]},{21:[1,45]},{21:[1,46]},o($Vi,[2,60]),{11:[2,104]},{11:[2,105]},{11:[2,106]},{11:[2,107]},{11:[2,108]},{39:$Vn,40:$Vo},{1:[2,1]},o($Vi,[2,2]),{11:$Vp,12:$Vq,20:49,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{11:$Vp,12:$Vq,20:63,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{30:[1,64]},{21:[1,65]},{21:[1,66],24:[1,67],58:$Vx},o($Vy,$Vz,{12:[1,69]}),{11:$Vp,12:$Vq,20:70,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},o($VA,[2,143]),o($VA,[2,144]),{11:$VB,12:$VC,13:[1,71],26:74,37:81,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,56:72,59:73,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},{11:$VB,12:$VC,26:88,37:81,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},{11:$Vp,12:$Vq,20:89,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{11:$VB,12:$VC,26:90,37:81,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},{33:[1,91]},{2:$VG,9:94,11:$VH,17:97,18:92,19:$VI,22:$VJ,25:$VK,29:$VL,32:[1,93],33:$VM,34:$VN,35:$VO,36:$Va,41:104,42:105,43:106,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VP,65:$VQ,66:$VR,67:$Vh},{11:[1,112],36:[1,111]},{12:[1,113]},{12:[1,114]},o($Vi,[2,58]),o($Vi,[2,59]),o($VA,[2,145]),o($VA,[2,146]),{13:[1,115],46:$VS},o($VT,[2,62]),o($VT,[2,63]),o($VT,[2,64],{50:$VU,51:$VV,52:$VW,53:$VX,54:$VY}),o($VZ,[2,116]),o($VZ,[2,117]),{11:$Vp,12:$Vq,41:56,43:60,49:122,50:$Vs,55:58,67:$Vt,68:$Vu},o($V_,[2,71]),{11:$Vp,12:$Vq,41:56,43:60,49:123,50:$Vs,55:58,67:$Vt,68:$Vu},o($V_,[2,73]),o($V_,[2,74],{12:$Vj,39:$Vk,40:$Vl}),o($V_,[2,75]),o($VA,[2,114],{39:$Vn,40:$Vo}),o($VA,[2,115]),{13:[1,124],46:$VS},{2:$VG,7:125,8:127,9:128,10:$V$,11:$VH,17:130,19:$VI,22:$VJ,25:$VK,29:$VL,32:[1,126],33:$VM,34:$VN,35:$VO,36:$Va,41:104,42:105,43:106,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VP,65:$VQ,66:$VR,67:$Vh},o($Vi,[2,38]),o($Vi,[2,39]),{11:$Vp,12:$Vq,20:131,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{11:[1,132]},{13:[1,133],16:134,17:135,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg},{21:[1,136],46:$VS},o($VA,[2,76]),{13:[1,137],58:[1,138]},o($V01,[2,102]),o($V01,[2,103],{80:$V11,81:$V21}),{11:$VB,12:[1,141],37:81,38:142,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$V31,75:78},o($V41,[2,134]),o($V51,[2,121],{72:[1,144],73:[1,145]}),o($V61,[2,126],{76:[1,146],77:[1,147],78:[1,148],79:[1,149]}),o($V71,[2,127]),o($V71,[2,128]),o($V71,$V81,{46:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1}),{11:$VB,12:$VC,37:156,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{11:$VB,12:$VC,37:157,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},o($Vf1,[2,97]),o($Vf1,[2,98]),o($Vf1,[2,99],{12:$Vj,39:$Vk,40:$Vl}),o($Vf1,[2,100]),{13:[1,158],80:$V11,81:$V21},{13:[1,159],46:$VS},{13:[1,160],80:$V11,81:$V21},{12:[1,161]},{2:$VG,9:163,11:$VH,17:97,19:$VI,22:$VJ,25:$VK,29:$VL,32:[1,162],33:$VM,34:$VN,35:$VO,36:$Va,41:104,42:105,43:106,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VP,65:$VQ,66:$VR,67:$Vh},o($Vg1,[2,140]),o($Vh1,[2,13]),{12:[1,164]},{12:[1,165]},{11:[1,167],23:166},{12:$Vj,24:[1,168],39:$Vk,40:$Vl},{12:[1,169]},{12:[1,170]},{12:[1,171]},{14:172,30:$Vm},{12:[1,173]},{21:[1,174]},{21:[1,175]},{21:[1,176]},o($Vi1,[2,33]),{21:[2,111]},{11:$Vp,12:$Vq,20:177,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{21:[2,113]},{11:[1,178]},{24:[1,179]},{13:[1,180],16:181,17:135,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg},{13:[1,182]},{21:[1,183]},{11:$Vp,12:$Vq,20:184,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{11:$Vp,12:$Vq,41:56,43:60,49:185,50:$Vs,55:58,67:$Vt,68:$Vu},{11:$Vp,12:$Vq,41:56,43:60,49:186,50:$Vs,55:58,67:$Vt,68:$Vu},{11:$Vp,12:$Vq,41:56,43:60,49:187,50:$Vs,55:58,67:$Vt,68:$Vu},{11:$Vp,12:$Vq,41:56,43:60,49:188,50:$Vs,55:58,67:$Vt,68:$Vu},{11:$Vp,12:$Vq,41:56,43:60,49:189,50:$Vs,55:58,67:$Vt,68:$Vu},o($Vj1,[2,70],{51:$VV,52:$VW,53:$VX,54:$VY}),{13:[1,190],50:$VU,51:$VV,52:$VW,53:$VX,54:$VY},{21:[1,191]},{2:$VG,8:193,9:128,10:$V$,11:$VH,17:130,19:$VI,22:$VJ,25:$VK,29:$VL,32:[1,192],33:$VM,34:$VN,35:$VO,36:$Va,41:104,42:105,43:106,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VP,65:$VQ,66:$VR,67:$Vh},o($Vi,[2,37]),o($Vk1,[2,5]),o($Vk1,[2,6]),{11:[1,194],15:[1,195]},{11:[1,196],23:166},{21:[1,197],46:$VS},o($Vy,[2,109]),{14:198,30:$Vm},{13:[1,199],58:$Vl1},{11:[1,201]},o($Vi,[2,41]),o($VA,[2,77]),{11:$VB,12:$VC,26:74,37:81,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,59:202,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},{11:$VB,12:$VC,37:81,38:203,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$V31,75:78},{11:$VB,12:$VC,37:81,38:204,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$V31,75:78},{11:$VB,12:$VC,26:205,37:206,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},o($V51,[2,120]),{11:$VB,12:$VC,37:81,38:142,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$V31,75:78},{11:$VB,12:$VC,37:81,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:207,75:78},{11:$VB,12:$VC,37:81,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:208,75:78},{11:$VB,12:$VC,37:81,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,75:209},{11:$VB,12:$VC,37:81,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,75:210},{11:$VB,12:$VC,37:81,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,75:211},{11:$VB,12:$VC,37:81,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,75:212},{11:$VB,12:$VC,37:213,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{11:$VB,12:$VC,37:214,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{11:$VB,12:$VC,37:215,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{11:$VB,12:$VC,37:216,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{11:$VB,12:$VC,37:217,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{11:$VB,12:$VC,37:218,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{13:$Vm1,46:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1},o($Vn1,[2,96],{51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1}),{14:220,30:$Vm},{30:[1,221]},{14:222,30:$Vm},{11:$VB,12:$VC,26:223,37:81,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},o($Vg1,[2,139]),o($Vh1,[2,12]),{11:$Vp,12:$Vq,20:224,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{11:$Vp,12:$Vq,20:225,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{21:[1,226],24:[1,227],58:$Vx},o($Vy,$Vz),{11:$Vp,12:$Vq,20:228,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{11:$VB,12:$VC,26:229,37:81,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},{11:$Vp,12:$Vq,20:230,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{11:$VB,12:$VC,26:231,37:81,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},{33:[1,232]},{11:[1,234],36:[1,233]},o($Vi1,[2,30]),o($Vi1,[2,31]),o($Vi1,[2,32]),{21:[2,112],46:$VS},{24:[1,235]},{11:$VB,12:$VC,37:236,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{14:237,30:$Vm},{13:[1,238],58:$Vl1},{14:239,30:$Vm},o($Vi,[2,34]),o($VT,[2,61]),o($Vj1,[2,65],{51:$VV,52:$VW,53:$VX,54:$VY}),o($V_,[2,66]),o($V_,[2,67]),o($V_,[2,68]),o($V_,[2,69]),o($V_,[2,72]),o($Vi,[2,35]),o($Vi,[2,36]),o($Vk1,[2,4]),{12:[1,240]},{12:[1,241]},o($Vy,$Vz,{12:[1,242]}),o($Vi,[2,40]),o($Vi,[2,56]),{14:243,30:$Vm},{17:244,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg},o($V01,[2,148]),o($V01,[2,101]),o($V41,$Vo1),o($V41,$Vp1),{80:[1,245],81:[1,246]},o([72,73,76,77,78,79,80,81],$V81,{13:$Vm1,46:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1}),o($V51,[2,118]),o($V51,[2,119]),o($V61,[2,122]),o($V61,[2,123]),o($V61,[2,124]),o($V61,[2,125]),o($Vn1,[2,89],{51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1}),o($Vn1,[2,90],{51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1}),o($Vf1,[2,91]),o($Vf1,[2,92]),o($Vf1,[2,93]),o($Vf1,[2,94]),o($Vf1,[2,95]),o($Vi,[2,45],{27:247,28:[1,248]}),{31:249,82:250,83:$Vq1,85:$Vr1},o($Vi,[2,47]),{13:[1,253],80:$V11,81:$V21},{13:[1,254],46:$VS},{13:[1,255],46:$VS},o($Vi1,[2,16]),{11:$Vp,12:$Vq,20:256,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{21:[1,257],46:$VS},{13:[1,258],80:$V11,81:$V21},{13:[1,259],46:$VS},{13:[1,260],80:$V11,81:$V21},{12:[1,261]},{11:[1,262]},{24:[1,263]},{11:$VB,12:$VC,37:264,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{21:[1,265],46:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1},o($Vi,[2,53]),{14:266,30:$Vm},o($Vi,[2,54]),{13:[1,267],16:268,17:135,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg},{13:[1,269]},{13:[1,270],16:271,17:135,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg},o($Vi,[2,57]),{11:[1,272]},{11:$VB,12:$VC,37:81,38:273,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$V31,75:78},{11:$VB,12:$VC,37:81,38:274,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$V31,75:78},o($Vi,[2,43],{28:[1,275]}),{14:276,25:$Vs1,30:$Vm},{32:[1,278],82:279,83:$Vq1,85:$Vr1},o($Vt1,[2,136]),{11:$Vp,12:$Vq,20:280,41:56,43:60,47:$Vr,48:51,49:52,50:$Vs,55:58,67:$Vt,68:$Vu,69:$Vv,70:$Vw},{84:[1,281]},{21:[1,282]},{21:[1,283]},{21:[1,284]},{21:[1,285],46:$VS},o($Vi1,[2,18]),{14:286,30:$Vm},{30:[1,287]},{14:288,30:$Vm},{11:$VB,12:$VC,26:289,37:81,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},{24:[1,290]},{11:$VB,12:$VC,37:291,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{21:[1,292],46:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1},{11:$VB,12:$VC,37:81,38:293,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$V31,75:78},o($Vi,[2,55]),{14:294,30:$Vm},{13:[1,295],58:$Vl1},{14:296,30:$Vm},{14:297,30:$Vm},{13:[1,298],58:$Vl1},o($V01,[2,147]),o($Vu1,$Vo1,{13:[1,299]}),o($Vu1,$Vp1,{13:[1,300]}),{14:301,25:$Vv1,30:$Vm},o($Vi,[2,44]),{12:[1,303]},o($Vi,[2,46]),o($Vt1,[2,135]),{46:$VS,84:[1,304]},{2:$VG,9:94,11:$VH,17:97,18:305,19:$VI,22:$VJ,25:$VK,29:$VL,33:$VM,34:$VN,35:$VO,36:$Va,41:104,42:105,43:106,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VP,65:$VQ,66:$VR,67:$Vh},o($Vi,[2,48]),o($Vi1,[2,14]),o($Vi1,[2,15]),o($Vi1,[2,17]),o($Vi1,[2,22],{27:306,28:[1,307]}),{31:308,82:250,83:$Vq1,85:$Vr1},o($Vi1,[2,24]),{13:[1,309],80:$V11,81:$V21},{11:$VB,12:$VC,37:310,41:84,43:87,50:$VE,55:85,67:$Vt,68:$Vu},{21:[1,311],46:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1},{11:$VB,12:$VC,37:81,38:312,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$V31,75:78},{21:[1,313]},o($Vk1,[2,7]),{14:314,30:$Vm},o($Vk1,[2,8]),o($Vk1,[2,10]),{14:315,30:$Vm},o($V41,[2,132]),o($V41,[2,133]),o($Vi,[2,42]),{12:[1,316]},{11:$VB,12:$VC,26:317,37:81,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},{2:$VG,9:94,11:$VH,17:97,18:318,19:$VI,22:$VJ,25:$VK,29:$VL,33:$VM,34:$VN,35:$VO,36:$Va,41:104,42:105,43:106,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VP,65:$VQ,66:$VR,67:$Vh},o($Vt1,[2,138],{17:97,41:104,42:105,43:106,9:163,2:$VG,11:$VH,19:$VI,22:$VJ,25:$VK,29:$VL,33:$VM,34:$VN,35:$VO,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VP,65:$VQ,66:$VR,67:$Vh}),o($Vi1,[2,20],{28:[1,319]}),{14:320,25:$Vs1,30:$Vm},{32:[1,321],82:279,83:$Vq1,85:$Vr1},{21:[1,322]},{21:[1,323],46:$V91,50:$Va1,51:$Vb1,52:$Vc1,53:$Vd1,54:$Ve1},{11:$VB,12:$VC,37:81,38:324,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$V31,75:78},{21:[1,325]},{11:[1,326]},o($Vk1,[2,9]),o($Vk1,[2,11]),{11:$VB,12:$VC,26:327,37:81,38:76,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$VF,75:78},{13:[1,328],80:$V11,81:$V21},o($Vt1,[2,137],{17:97,41:104,42:105,43:106,9:163,2:$VG,11:$VH,19:$VI,22:$VJ,25:$VK,29:$VL,33:$VM,34:$VN,35:$VO,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VP,65:$VQ,66:$VR,67:$Vh}),{14:329,25:$Vv1,30:$Vm},o($Vi1,[2,21]),o($Vi1,[2,23]),o($Vi1,[2,25]),{11:$VB,12:$VC,37:81,38:330,41:84,43:87,47:$VD,48:80,50:$VE,55:85,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:77,74:$V31,75:78},{21:[1,331]},{11:[1,332]},{39:[1,333],40:[1,334]},{13:[1,335],80:$V11,81:$V21},{14:336,30:$Vm},o($Vi1,[2,19]),{21:[1,337]},{11:[1,338]},{39:[1,339],40:[1,340]},{13:[1,341]},{13:[1,342]},{14:343,30:$Vm},o($Vg1,[2,142]),{11:[1,344]},{39:[1,345],40:[1,346]},{13:[1,347]},{13:[1,348]},{14:349,30:$Vm},{14:350,30:$Vm},o($Vg1,[2,141]),{39:[1,351],40:[1,352]},{13:[1,353]},{13:[1,354]},{14:355,30:$Vm},{14:356,30:$Vm},o($Vi,[2,51]),o($Vi,[2,52]),{13:[1,357]},{13:[1,358]},{14:359,30:$Vm},{14:360,30:$Vm},o($Vi,[2,49]),o($Vi,[2,50]),{14:361,30:$Vm},{14:362,30:$Vm},o($Vi1,[2,28]),o($Vi1,[2,29]),o($Vi1,[2,26]),o($Vi1,[2,27])],
defaultActions: {19:[2,104],20:[2,105],21:[2,106],22:[2,107],23:[2,108],25:[2,1],108:[2,111],110:[2,113]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const TIPO_VALOR = require('../js/instrucciones').TIPO_VALOR;
  const TIPO_OPERACION = require('../js/instrucciones').TIPO_OPERACION;
  const instruccionesAPI = require('../js/instrucciones').instruccionesAPI;
  const cErrores = require ('../js/errores');
  const cNodoError = require ('../js/nodoError');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORAR */
break;
case 1:/* IGNORAR COMENTARIO */
break;
case 2:/* IGNORAR COMENTARIO */
break;
case 3:return 36;
break;
case 4:return 60;
break;
case 5:return 61;
break;
case 6:return 62;
break;
case 7:return 63;
break;
case 8:return 'SALTOLINEA';
break;
case 9:return 'TABULADOR';
break;
case 10:return 'RETORNO';
break;
case 11:return 'BARRAINVER';
break;
case 12:return 'COMILLADOBLE';
break;
case 13:return 39;
break;
case 14:return 40;
break;
case 15:return 46;
break;
case 16:return 50;
break;
case 17:return 51;
break;
case 18:return 52;
break;
case 19:return 54;
break;
case 20:return 53;
break;
case 21:return 72;
break;
case 22:return 73;
break;
case 23:return 78;
break;
case 24:return 76;
break;
case 25:return 79;
break;
case 26:return 77;
break;
case 27:return 80;
break;
case 28:return 81;
break;
case 29:return 74;
break;
case 30:return 44;
break;
case 31:return 45;
break;
case 32:return 25;
break;
case 33:return 28;
break;
case 34:return 29;
break;
case 35:return 83;
break;
case 36:return 85;
break;
case 37:return 64;
break;
case 38:return 65;
break;
case 39:return 33;
break;
case 40:return 34;
break;
case 41:return 35;
break;
case 42:return 66;
break;
case 43:return 10;
break;
case 44:return 19;
break;
case 45:return 22;
break;
case 46:return 'RPUBLIC';
break;
case 47:return 'RPRIVATE';
break;
case 48:return 'RPROTECTED';
break;
case 49:return 'RSTATIC';
break;
case 50:return 15;
break;
case 51:return 'RARGS';
break;
case 52:return 69;
break;
case 53:return 70;
break;
case 54:return 30;
break;
case 55:return 32;
break;
case 56:return 'CORIZQ';
break;
case 57:return 'CORDER';
break;
case 58:return 24;
break;
case 59:return "COMA";
break;
case 60:return 21;
break;
case 61:return 84;
break;
case 62:return 12;
break;
case 63:return 13;
break;
case 64:return 68;
break;
case 65:return 67;
break;
case 66:return 11;
break;
case 67: yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 ); return 47; 
break;
case 68:return 5;
break;
case 69:cErrores.errores.addError(new cNodoError.nodoError("Lexico","Caracter desconocido",yy_.yylloc.first_line,yy_.yytext))
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\r)/,/^(?:\\\\)/,/^(?:\\")/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:args\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:"[^\"]*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
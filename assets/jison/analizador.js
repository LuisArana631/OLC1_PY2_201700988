/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,4],$V2=[1,5],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,18],$Va=[1,15],$Vb=[1,6],$Vc=[1,7],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,22],$Vh=[1,23],$Vi=[2,5,9,14,18,19,24,28,29,30,31,37,41,42,57,58,59,60,65],$Vj=[1,33],$Vk=[1,34],$Vl=[1,39],$Vm=[1,43],$Vn=[1,44],$Vo=[1,52],$Vp=[1,54],$Vq=[1,46],$Vr=[1,56],$Vs=[1,57],$Vt=[1,49],$Vu=[1,50],$Vv=[1,63],$Vw=[13,17,55],$Vx=[2,94],$Vy=[2,5,9,12,13,14,18,19,24,27,28,29,30,31,37,41,42,43,47,48,49,50,51,57,58,59,60,61,62,64,65,70,71,72,73,74,75,76,77,80,81,82],$Vz=[1,73],$VA=[1,77],$VB=[1,70],$VC=[1,74],$VD=[1,67],$VE=[1,85],$VF=[1,86],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[1,93],$VM=[1,94],$VN=[1,97],$VO=[1,98],$VP=[1,99],$VQ=[1,104],$VR=[2,5,9,12,13,14,18,19,24,27,28,29,30,31,37,41,42,43,57,58,59,60,61,62,64,65,80,81,82],$VS=[1,105],$VT=[1,106],$VU=[1,107],$VV=[1,108],$VW=[1,109],$VX=[2,5,9,12,13,14,18,19,24,27,28,29,30,31,37,41,42,43,55,57,58,59,60,61,62,64,65,70,71,72,73,74,75,76,77,80,81,82],$VY=[2,5,9,12,13,14,18,19,24,27,28,29,30,31,37,41,42,43,47,48,49,50,51,57,58,59,60,61,62,64,65,80,81,82],$VZ=[1,111],$V_=[2,98],$V$=[2,5,9,12,13,14,18,19,24,27,28,29,30,31,37,41,42,43,47,48,49,50,51,55,57,58,59,60,61,62,64,65,70,71,72,73,74,75,76,77,80,81,82],$V01=[1,121],$V11=[1,122],$V21=[12,76,77],$V31=[12,13,76,77],$V41=[12,13,70,71,72,73,74,75,76,77],$V51=[2,111],$V61=[1,131],$V71=[1,132],$V81=[1,133],$V91=[1,134],$Va1=[1,135],$Vb1=[1,136],$Vc1=[12,13,43,47,48,49,50,51,70,71,72,73,74,75,76,77],$Vd1=[2,5,9,14,18,19,23,24,27,28,29,30,31,37,41,42,57,58,59,60,61,62,64,65,80,82],$Ve1=[9,14,18,19,24,27,28,29,30,31,37,57,58,59,60,61,62,64,65,80,82],$Vf1=[1,173],$Vg1=[1,174],$Vh1=[1,178],$Vi1=[1,184],$Vj1=[1,203],$Vk1=[12,13,43,47,70,71,72,73,74,75,76,77],$Vl1=[12,55],$Vm1=[2,112],$Vn1=[2,113],$Vo1=[1,234],$Vp1=[1,235],$Vq1=[1,257],$Vr1=[27,80,82],$Vs1=[1,280],$Vt1=[76,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"sentencias":7,"sentencia":8,"RPRINTLN":9,"PARIZQ":10,"expresion_cadena":11,"PARDER":12,"PTOCOMA":13,"RPRINT":14,"tipo_dato":15,"lista_id":16,"IGUAL":17,"IDENTIFICADOR":18,"RIF":19,"expresion_logica":20,"bloque_sentencias":21,"lista_else_if":22,"RELSE":23,"RSWITCH":24,"LLAVIZQ":25,"casos":26,"LLAVDER":27,"RWHILE":28,"RDO":29,"RFOR":30,"RINT":31,"valor_numerico":32,"expresion_relacional":33,"INCREMENTO":34,"DECREMENTO":35,"valo_numerico":36,"RVOID":37,"parametros_fun":38,"incremento_decremento":39,"valor_transferencia":40,"RCLASS":41,"RIMPORT":42,"MAS":43,"CADENA":44,"valor_booleano":45,"aux_expresion_cadena":46,"MENOS":47,"MULTIPLICACION":48,"DIVISION":49,"MODULO":50,"POTENCIA":51,"llamada":52,"parametros":53,"expresion_numerica":54,"COMA":55,"parametro":56,"RDOUBLE":57,"RBOOLEAN":58,"RCHAR":59,"RSTRING":60,"RBREAK":61,"RRETURN":62,"expresionCadena":63,"RCONTINUE":64,"ENTERO":65,"DECIMAL":66,"RTRUE":67,"RFALSE":68,"valores_expresion_relacional":69,"IGUALDAD":70,"DISTINTO":71,"MAYOR":72,"MENOR":73,"MAYORIGUAL":74,"MENORIGUAL":75,"AND":76,"OR":77,"NOT":78,"caso_eval":79,"RCASE":80,"DOSPTS":81,"RDEFAULT":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"RPRINTLN",10:"PARIZQ",12:"PARDER",13:"PTOCOMA",14:"RPRINT",17:"IGUAL",18:"IDENTIFICADOR",19:"RIF",23:"RELSE",24:"RSWITCH",25:"LLAVIZQ",27:"LLAVDER",28:"RWHILE",29:"RDO",30:"RFOR",31:"RINT",34:"INCREMENTO",35:"DECREMENTO",36:"valo_numerico",37:"RVOID",41:"RCLASS",42:"RIMPORT",43:"MAS",44:"CADENA",47:"MENOS",48:"MULTIPLICACION",49:"DIVISION",50:"MODULO",51:"POTENCIA",55:"COMA",57:"RDOUBLE",58:"RBOOLEAN",59:"RCHAR",60:"RSTRING",61:"RBREAK",62:"RRETURN",63:"expresionCadena",64:"RCONTINUE",65:"ENTERO",66:"DECIMAL",67:"RTRUE",68:"RFALSE",70:"IGUALDAD",71:"DISTINTO",72:"MAYOR",73:"MENOR",74:"MAYORIGUAL",75:"MENORIGUAL",76:"AND",77:"OR",78:"NOT",80:"RCASE",81:"DOSPTS",82:"RDEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[8,5],[8,5],[8,3],[8,5],[8,3],[8,8],[8,6],[8,7],[8,5],[8,7],[8,5],[8,6],[8,14],[8,14],[8,13],[8,13],[8,5],[8,6],[8,5],[8,6],[8,2],[8,2],[6,5],[6,5],[6,5],[6,4],[6,3],[6,3],[6,5],[6,3],[6,8],[6,6],[6,7],[6,5],[6,7],[6,5],[6,6],[6,14],[6,14],[6,13],[6,13],[6,5],[6,6],[6,5],[6,6],[6,2],[6,1],[11,3],[11,1],[11,1],[11,1],[46,3],[46,3],[46,3],[46,3],[46,3],[46,1],[46,3],[46,1],[46,1],[46,1],[52,4],[52,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,2],[54,1],[54,1],[54,1],[54,1],[53,3],[53,1],[56,1],[56,1],[56,1],[56,1],[56,1],[15,1],[15,1],[15,1],[15,1],[15,1],[16,3],[16,1],[40,1],[40,2],[40,1],[32,1],[32,1],[45,1],[45,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[69,1],[69,1],[69,1],[20,3],[20,3],[20,6],[20,6],[20,2],[20,1],[26,2],[26,1],[79,4],[79,3],[21,3],[21,2],[22,7],[22,6],[39,2],[39,2],[39,2],[39,2],[38,4],[38,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); return $$[$0-1]; 
break;
case 2: case 4:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 5: case 94: case 119:
 this.$ = [$$[$0]]; 
break;
case 6: case 28:
 this.$ = instruccionesAPI.nuevoPrintln($$[$0-2]); 
break;
case 7: case 29:
 this.$ = instruccionesAPI.nuevoPrint($$[$0-2]); 
break;
case 8: case 33:
 this.$ = instruccionesAPI.nuevoDeclaracionVar($$[$0-1],$$[$0-2]); 
break;
case 9: case 34:
 this.$ = instruccionesAPI.nuevoDeclaracionVarValor($$[$0-3],$$[$0-4],$$[$0-1]); 
break;
case 10: case 35:
 this.$ = instruccionesAPI.nuevaAsignacion($$[$0-2],$$[$0]); 
break;
case 11: case 36:
 this.$ = instruccionesAPI.nuevoIfElseListElseIf($$[$0-5],$$[$0-3],$$[$0],$$[$0-2]); 
break;
case 12: case 37:
 this.$ = instruccionesAPI.nuevoIfListElseIf($$[$0-3],$$[$0-1],$$[$0]); 
break;
case 13: case 38:
 this.$ = instruccionesAPI.nuevoElse($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 14: case 39:
 this.$ = instruccionesAPI.nuevoIf($$[$0-2],$$[$0]); 
break;
case 15: case 40:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]); 
break;
case 16: case 41:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-2],$$[$0]); 
break;
case 17: case 42:
 this.$ = instruccionesAPI.nuevoDoWhile($$[$0-1],$$[$0-4]); 
break;
case 18: case 19: case 20: case 21: case 43: case 44: case 45: case 46:
 this.$ = instruccionesAPI.nuevoFor($$[$0-10],$$[$0-8],$$[$0-6],$$[$0-3],$$[$0]); 
break;
case 22: case 24: case 47: case 49:
 this.$ = instruccionesAPI.nuevaDeclaracionFun($$[$0-4],$$[$0-3],$$[$0]); 
break;
case 23: case 25: case 48: case 50:
 this.$ = instruccionesAPI.nuevaDeclaracionFunParametros($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 26: case 27: case 51: case 63: case 75:
 this.$ = $$[$0-1]; 
break;
case 30:
 this.$ = instruccionesAPI.nuevaClaseInstrucciones($$[$0-3],$$[$0-1]); 
break;
case 31:
 this.$ = instruccionesAPI.nuevaClase($$[$0-2]); 
break;
case 32:
 this.$ = instruccionesAPI.nuevoImport($$[$0-1]); 
break;
case 52:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
            cErrores.errores.addError(new cNodoError.nodoError("Sintactico", "No se esperaba el caracter: "+yytext,yylineno)); 
break;
case 53: case 69:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA); 
break;
case 54: case 84:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.CADENA); 
break;
case 55: case 56: case 62: case 64: case 66: case 77: case 78: case 80: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 95: case 97: case 108: case 110: case 111: case 117:
 this.$ = $$[$0]; 
break;
case 57: case 70:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA); 
break;
case 58: case 71:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION); 
break;
case 59: case 72:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION); 
break;
case 60: case 73:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO); 
break;
case 61: case 74:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA); 
break;
case 65: case 79: case 83:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR); 
break;
case 67:
 this.$ = instruccionesAPI.nuevaInstanciaParametros($$[$0-3],$$[$0-1]); 
break;
case 68:
 this.$ = instruccionesAPI.nuevaInstancia($$[$0-2]); 
break;
case 76:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 81:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 82:
 this.$ = [$$[$0]]
break;
case 93:
 $$[$0-2].push($$[$0]);  this.$ = $$[$0-2]; 
break;
case 96:
 this.$ = instruccionesAPI.nuevoReturn($$[$0]); 
break;
case 98: case 99:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.NUMERO); 
break;
case 100: case 101:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.BOOLEAN); 
break;
case 102:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUALDAD); 
break;
case 103:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DISTINTO); 
break;
case 104:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 105:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 106:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 107:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 109:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 112:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND); 
break;
case 113:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR); 
break;
case 114:
 this.$ = instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.AND), TIPO_OPERACION.NOT); 
break;
case 115:
 this.$ = instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.OR), TIPO_OPERACION.NOT); 
break;
case 116:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 118:
 $$[$0-1].push($$[$0]); this.$ =$$[$0-1]; 
break;
case 120:
 this.$ = instruccionesAPI.nuevoCase($$[$0-2],$$[$0]); 
break;
case 121:
 this.$ = instruccionesAPI.nuevoDefault($$[$0]); 
break;
case 122:
 this.$ = instruccionesAPI.nuevoBloqueSentencias($$[$0-1]); 
break;
case 123:
 this.$ = instruccionesAPI.nuevoBloqueSentencias(undefined) 
break;
case 124:
 $$[$0-6].push(instruccionesAPI.nuevoIf($$[$0-2],$$[$0])); this.$ = $$[$0-6]; 
break;
case 125:
 this.$ = [instruccionesAPI.nuevoIf($$[$0-2],$$[$0])]; 
break;
case 126: case 128:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0-1],TIPO_OPERACION.INCREMENTO); 
break;
case 127: case 129:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0-1],TIPO_OPERACION.DECREMENTO); 
break;
case 130:
 $$[$0-3].push(instruccionesAPI.nuevoParametroFun($$[$0-1],$$[$0])); this.$ = $$[$0-3] 
break;
case 131:
 this.$ = [instruccionesAPI.nuevoParametroFun($$[$0-1],$$[$0])]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,9:$V1,14:$V2,15:8,18:$V3,19:$V4,24:$V5,28:$V6,29:$V7,30:$V8,31:$V9,37:$Va,39:16,41:$Vb,42:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,65:$Vh},{1:[3]},{2:$V0,5:[1,24],6:25,9:$V1,14:$V2,15:8,18:$V3,19:$V4,24:$V5,28:$V6,29:$V7,30:$V8,31:$V9,37:$Va,39:16,41:$Vb,42:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,65:$Vh},o($Vi,[2,3]),{10:[1,26]},{10:[1,27]},{18:[1,28]},{18:[1,29]},{16:30,18:[1,31]},{17:[1,32],34:$Vj,35:$Vk},{10:[1,35]},{10:[1,36]},{10:[1,37]},{21:38,25:$Vl},{10:[1,40]},{18:[1,41]},{13:[1,42]},o($Vi,[2,52]),{18:[2,88]},{18:[2,89]},{18:[2,90]},{18:[2,91]},{18:[2,92]},{34:$Vm,35:$Vn},{1:[2,1]},o($Vi,[2,2]),{10:$Vo,11:45,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{10:$Vo,11:58,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{25:[1,59]},{13:[1,60]},{13:[1,61],17:[1,62],55:$Vv},o($Vw,$Vx,{10:[1,64]}),{10:$Vo,11:65,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},o($Vy,[2,126]),o($Vy,[2,127]),{10:$Vz,18:$VA,20:66,32:76,33:68,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69,78:$VD},{10:$Vo,11:79,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{10:$Vz,18:$VA,20:80,32:76,33:68,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69,78:$VD},{28:[1,81]},{7:82,8:84,9:$VE,14:$VF,15:87,18:$VG,19:$VH,24:$VI,27:[1,83],28:$VJ,29:$VK,30:$VL,31:$V9,37:$VM,39:95,40:96,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$VN,62:$VO,64:$VP,65:$Vh},{18:[1,101],31:[1,100]},{10:[1,102]},o($Vi,[2,51]),o($Vy,[2,128]),o($Vy,[2,129]),{12:[1,103],43:$VQ},o($VR,[2,54]),o($VR,[2,55]),o($VR,[2,56],{47:$VS,48:$VT,49:$VU,50:$VV,51:$VW}),o($VX,[2,100]),o($VX,[2,101]),o($VY,[2,62]),{10:$Vo,18:$Vp,32:53,39:51,46:110,52:55,65:$Vr,66:$Vs},o($VY,[2,64]),o($VY,[2,65],{10:$VZ,34:$Vj,35:$Vk}),o($VY,[2,66]),o($Vy,$V_,{34:$Vm,35:$Vn}),o($V$,[2,99]),{12:[1,112],43:$VQ},{7:113,8:84,9:$VE,14:$VF,15:87,18:$VG,19:$VH,24:$VI,27:[1,114],28:$VJ,29:$VK,30:$VL,31:$V9,37:$VM,39:95,40:96,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$VN,62:$VO,64:$VP,65:$Vh},o($Vi,[2,32]),o($Vi,[2,33]),{10:$Vo,11:115,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{18:[1,116]},{12:[1,117],15:119,31:$V9,38:118,57:$Vd,58:$Ve,59:$Vf,60:$Vg},o($Vi,[2,35],{43:$VQ}),{12:[1,120],76:$V01,77:$V11},{10:[1,123],18:$VA,32:76,33:124,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69},o($V21,[2,117]),o($V31,[2,108],{70:[1,125],71:[1,126],72:[1,127],73:[1,128],74:[1,129],75:[1,130]}),o($V41,[2,109]),o($V41,[2,110]),o($V41,$V51,{43:$V61,47:$V71,48:$V81,49:$V91,50:$Va1,51:$Vb1}),{10:$Vz,18:$VA,32:76,39:75,47:$VC,52:78,54:137,65:$Vr,66:$Vs},{10:$Vz,18:$VA,32:76,39:75,47:$VC,52:78,54:138,65:$Vr,66:$Vs},o($Vc1,[2,77]),o($Vc1,[2,78]),o($Vc1,[2,79],{10:$VZ,34:$Vj,35:$Vk}),o($Vc1,[2,80]),{12:[1,139],43:$VQ},{12:[1,140],76:$V01,77:$V11},{10:[1,141]},{8:143,9:$VE,14:$VF,15:87,18:$VG,19:$VH,24:$VI,27:[1,142],28:$VJ,29:$VK,30:$VL,31:$V9,37:$VM,39:95,40:96,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$VN,62:$VO,64:$VP,65:$Vh},o($Vd1,[2,123]),o($Ve1,[2,5]),{10:[1,144]},{10:[1,145]},{16:146,18:[1,147]},{17:[1,148],34:$Vj,35:$Vk},{10:[1,149]},{10:[1,150]},{10:[1,151]},{21:152,25:$Vl},{10:[1,153]},{18:[1,154]},{13:[1,155]},{13:[1,156]},{13:[2,95]},{63:[1,157]},{13:[2,97]},{18:[1,158]},{17:[1,159]},{12:[1,160],15:119,31:$V9,38:161,57:$Vd,58:$Ve,59:$Vf,60:$Vg},{13:[1,162]},{10:$Vo,11:163,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{10:$Vo,18:$Vp,32:53,39:51,46:164,52:55,65:$Vr,66:$Vs},{10:$Vo,18:$Vp,32:53,39:51,46:165,52:55,65:$Vr,66:$Vs},{10:$Vo,18:$Vp,32:53,39:51,46:166,52:55,65:$Vr,66:$Vs},{10:$Vo,18:$Vp,32:53,39:51,46:167,52:55,65:$Vr,66:$Vs},{10:$Vo,18:$Vp,32:53,39:51,46:168,52:55,65:$Vr,66:$Vs},{12:[1,169],47:$VS,48:$VT,49:$VU,50:$VV,51:$VW},{12:[1,171],18:$Vf1,32:175,44:$Vg1,45:176,52:177,53:170,56:172,65:$Vh1,66:$Vs,67:$Vt,68:$Vu},{13:[1,179]},{8:143,9:$VE,14:$VF,15:87,18:$VG,19:$VH,24:$VI,27:[1,180],28:$VJ,29:$VK,30:$VL,31:$V9,37:$VM,39:95,40:96,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$VN,62:$VO,64:$VP,65:$Vh},o($Vi,[2,31]),{13:[1,181],43:$VQ},o($Vw,[2,93]),{21:182,25:$Vl},{12:[1,183],55:$Vi1},{18:[1,185]},{21:186,25:$Vl},{10:$Vz,18:$VA,32:76,33:187,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69},{10:$Vz,18:$VA,32:76,33:188,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69},{10:$Vz,18:$VA,20:189,32:76,33:68,39:75,44:$VB,45:71,47:$VC,52:78,54:190,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69,78:$VD},o($V21,[2,116]),{10:$Vz,18:$VA,32:76,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:191},{10:$Vz,18:$VA,32:76,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:192},{10:$Vz,18:$VA,32:76,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:193},{10:$Vz,18:$VA,32:76,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:194},{10:$Vz,18:$VA,32:76,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:195},{10:$Vz,18:$VA,32:76,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:196},{10:$Vz,18:$VA,32:76,39:75,47:$VC,52:78,54:197,65:$Vr,66:$Vs},{10:$Vz,18:$VA,32:76,39:75,47:$VC,52:78,54:198,65:$Vr,66:$Vs},{10:$Vz,18:$VA,32:76,39:75,47:$VC,52:78,54:199,65:$Vr,66:$Vs},{10:$Vz,18:$VA,32:76,39:75,47:$VC,52:78,54:200,65:$Vr,66:$Vs},{10:$Vz,18:$VA,32:76,39:75,47:$VC,52:78,54:201,65:$Vr,66:$Vs},{10:$Vz,18:$VA,32:76,39:75,47:$VC,52:78,54:202,65:$Vr,66:$Vs},{12:$Vj1,43:$V61,47:$V71,48:$V81,49:$V91,50:$Va1,51:$Vb1},o($Vk1,[2,76],{48:$V81,49:$V91,50:$Va1,51:$Vb1}),{25:[1,204]},{21:205,25:$Vl},{10:$Vz,18:$VA,20:206,32:76,33:68,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69,78:$VD},o($Vd1,[2,122]),o($Ve1,[2,4]),{10:$Vo,11:207,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{10:$Vo,11:208,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{13:[1,209],17:[1,210],55:$Vv},o($Vw,$Vx,{10:[1,211]}),{10:$Vo,11:212,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{10:$Vz,18:$VA,20:213,32:76,33:68,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69,78:$VD},{10:$Vo,11:214,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{10:$Vz,18:$VA,20:215,32:76,33:68,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69,78:$VD},{28:[1,216]},{18:[1,218],31:[1,217]},{10:[1,219]},o($Ve1,[2,26]),o($Ve1,[2,27]),{13:[2,96]},{17:[1,220]},{36:[1,221]},{21:222,25:$Vl},{12:[1,223],55:$Vi1},o($Vi,[2,28]),o($VR,[2,53]),o([2,5,9,12,13,14,18,19,24,27,28,29,30,31,37,41,42,43,47,57,58,59,60,61,62,64,65,80,81,82],[2,57],{48:$VT,49:$VU,50:$VV,51:$VW}),o($VY,[2,58]),o($VY,[2,59]),o($VY,[2,60]),o($VY,[2,61]),o($VY,[2,63]),{12:[1,224],55:[1,225]},o($V$,[2,68]),o($Vl1,[2,82]),o($Vl1,[2,83],{10:$VZ}),o($Vl1,[2,84]),o($Vl1,[2,85]),o($Vl1,[2,86]),o($Vl1,[2,87]),o([12,13,55],$V_),o($Vi,[2,29]),o($Vi,[2,30]),o($Vi,[2,34]),o($Vi,[2,49]),{21:226,25:$Vl},{15:227,31:$V9,57:$Vd,58:$Ve,59:$Vf,60:$Vg},o($Vl1,[2,131]),o($Vi,[2,39],{22:228,23:[1,229]}),o($V21,$Vm1),o($V21,$Vn1),{76:[1,230],77:[1,231]},o([70,71,72,73,74,75,76,77],$V51,{12:$Vj1,43:$V61,47:$V71,48:$V81,49:$V91,50:$Va1,51:$Vb1}),o($V31,[2,102]),o($V31,[2,103]),o($V31,[2,104]),o($V31,[2,105]),o($V31,[2,106]),o($V31,[2,107]),o($Vk1,[2,69],{48:$V81,49:$V91,50:$Va1,51:$Vb1}),o($Vk1,[2,70],{48:$V81,49:$V91,50:$Va1,51:$Vb1}),o($Vc1,[2,71]),o($Vc1,[2,72]),o($Vc1,[2,73]),o($Vc1,[2,74]),o($Vc1,[2,75]),{26:232,79:233,80:$Vo1,82:$Vp1},o($Vi,[2,41]),{12:[1,236],76:$V01,77:$V11},{12:[1,237],43:$VQ},{12:[1,238],43:$VQ},o($Ve1,[2,8]),{10:$Vo,11:239,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{12:[1,240],15:119,31:$V9,38:241,57:$Vd,58:$Ve,59:$Vf,60:$Vg},o($Ve1,[2,10],{43:$VQ}),{12:[1,242],76:$V01,77:$V11},{12:[1,243],43:$VQ},{12:[1,244],76:$V01,77:$V11},{10:[1,245]},{18:[1,246]},{17:[1,247]},{12:[1,248],15:119,31:$V9,38:249,57:$Vd,58:$Ve,59:$Vf,60:$Vg},{32:250,65:$Vh1,66:$Vs},{13:[1,251]},o($Vi,[2,47]),{21:252,25:$Vl},o($V$,[2,67]),{18:$Vf1,32:175,44:$Vg1,45:176,52:177,56:253,65:$Vh1,66:$Vs,67:$Vt,68:$Vu},o($Vi,[2,50]),{18:[1,254]},o($Vi,[2,37],{23:[1,255]}),{19:$Vq1,21:256,25:$Vl},{10:$Vz,18:$VA,32:76,33:258,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69},{10:$Vz,18:$VA,32:76,33:259,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69},{27:[1,260],79:261,80:$Vo1,82:$Vp1},o($Vr1,[2,119]),{10:$Vo,11:262,18:$Vp,32:53,39:51,44:$Vq,45:47,46:48,52:55,65:$Vr,66:$Vs,67:$Vt,68:$Vu},{81:[1,263]},o($Vi,[2,42]),{13:[1,264]},{13:[1,265]},{13:[1,266],43:$VQ},{21:267,25:$Vl},{12:[1,268],55:$Vi1},{21:269,25:$Vl},{25:[1,270]},{21:271,25:$Vl},{10:$Vz,18:$VA,20:272,32:76,33:68,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69,78:$VD},{17:[1,273]},{36:[1,274]},{21:275,25:$Vl},{12:[1,276],55:$Vi1},{13:[1,277]},{10:$Vz,18:$VA,32:76,33:278,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69},o($Vi,[2,48]),o($Vl1,[2,81]),o($Vl1,[2,130]),{19:$Vs1,21:279,25:$Vl},o($Vi,[2,38]),{10:[1,281]},o($Vt1,$Vm1,{12:[1,282]}),o($Vt1,$Vn1,{12:[1,283]}),o($Vi,[2,40]),o($Vr1,[2,118]),{43:$VQ,81:[1,284]},{7:285,8:84,9:$VE,14:$VF,15:87,18:$VG,19:$VH,24:$VI,28:$VJ,29:$VK,30:$VL,31:$V9,37:$VM,39:95,40:96,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$VN,62:$VO,64:$VP,65:$Vh},o($Ve1,[2,6]),o($Ve1,[2,7]),o($Ve1,[2,9]),o($Ve1,[2,24]),{21:286,25:$Vl},o($Ve1,[2,14],{22:287,23:[1,288]}),{26:289,79:233,80:$Vo1,82:$Vp1},o($Ve1,[2,16]),{12:[1,290],76:$V01,77:$V11},{32:291,65:$Vh1,66:$Vs},{13:[1,292]},o($Ve1,[2,22]),{21:293,25:$Vl},{10:$Vz,18:$VA,32:76,33:294,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69},{13:[1,295]},o($Vi,[2,36]),{10:[1,296]},{10:$Vz,18:$VA,20:297,32:76,33:68,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69,78:$VD},o($V21,[2,114]),o($V21,[2,115]),{7:298,8:84,9:$VE,14:$VF,15:87,18:$VG,19:$VH,24:$VI,28:$VJ,29:$VK,30:$VL,31:$V9,37:$VM,39:95,40:96,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$VN,62:$VO,64:$VP,65:$Vh},o($Vr1,[2,121],{15:87,39:95,40:96,8:143,9:$VE,14:$VF,18:$VG,19:$VH,24:$VI,28:$VJ,29:$VK,30:$VL,31:$V9,37:$VM,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$VN,62:$VO,64:$VP,65:$Vh}),o($Ve1,[2,25]),o($Ve1,[2,12],{23:[1,299]}),{19:$Vq1,21:300,25:$Vl},{27:[1,301],79:261,80:$Vo1,82:$Vp1},o($Ve1,[2,17]),{13:[1,302]},{10:$Vz,18:$VA,32:76,33:303,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69},o($Ve1,[2,23]),{13:[1,304]},{18:[1,305]},{10:$Vz,18:$VA,20:306,32:76,33:68,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69,78:$VD},{12:[1,307],76:$V01,77:$V11},o($Vr1,[2,120],{15:87,39:95,40:96,8:143,9:$VE,14:$VF,18:$VG,19:$VH,24:$VI,28:$VJ,29:$VK,30:$VL,31:$V9,37:$VM,57:$Vd,58:$Ve,59:$Vf,60:$Vg,61:$VN,62:$VO,64:$VP,65:$Vh}),{19:$Vs1,21:308,25:$Vl},o($Ve1,[2,13]),o($Ve1,[2,15]),{10:$Vz,18:$VA,32:76,33:309,39:75,44:$VB,45:71,47:$VC,52:78,54:72,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:69},{13:[1,310]},{18:[1,311]},{34:[1,312],35:[1,313]},{12:[1,314],76:$V01,77:$V11},{21:315,25:$Vl},o($Ve1,[2,11]),{13:[1,316]},{18:[1,317]},{34:[1,318],35:[1,319]},{13:[1,320]},{13:[1,321]},{21:322,25:$Vl},o($Vd1,[2,125]),{18:[1,323]},{34:[1,324],35:[1,325]},{13:[1,326]},{13:[1,327]},{12:[1,328]},{12:[1,329]},o($Vd1,[2,124]),{34:[1,330],35:[1,331]},{13:[1,332]},{13:[1,333]},{12:[1,334]},{12:[1,335]},{21:336,25:$Vl},{21:337,25:$Vl},{13:[1,338]},{13:[1,339]},{12:[1,340]},{12:[1,341]},{21:342,25:$Vl},{21:343,25:$Vl},o($Vi,[2,45]),o($Vi,[2,46]),{12:[1,344]},{12:[1,345]},{21:346,25:$Vl},{21:347,25:$Vl},o($Vi,[2,43]),o($Vi,[2,44]),{21:348,25:$Vl},{21:349,25:$Vl},o($Ve1,[2,20]),o($Ve1,[2,21]),o($Ve1,[2,18]),o($Ve1,[2,19])],
defaultActions: {18:[2,88],19:[2,89],20:[2,90],21:[2,91],22:[2,92],24:[2,1],97:[2,95],99:[2,97],157:[2,96]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const TIPO_VALOR = require('../js/instrucciones').TIPO_VALOR;
  const TIPO_OPERACION = require('../js/instrucciones').TIPO_OPERACION;
  const instruccionesAPI = require('../js/instrucciones').instruccionesAPI;
  const cErrores = require ('../js/errores').errores;
  const cNodoError = require ('../js/nodoError').nodoError;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORAR */
break;
case 1:/* IGNORAR COMENTARIO */
break;
case 2:/* IGNORAR COMENTARIO */
break;
case 3:return 31;
break;
case 4:return 57;
break;
case 5:return 58;
break;
case 6:return 59;
break;
case 7:return 60;
break;
case 8:return 'SALTOLINEA';
break;
case 9:return 'TABULADOR';
break;
case 10:return 'RETORNO';
break;
case 11:return 'BARRAINVER';
break;
case 12:return 'COMILLADOBLE';
break;
case 13:return 34;
break;
case 14:return 35;
break;
case 15:return 43;
break;
case 16:return 47;
break;
case 17:return 48;
break;
case 18:return 49;
break;
case 19:return 51;
break;
case 20:return 50;
break;
case 21:return 70;
break;
case 22:return 71;
break;
case 23:return 74;
break;
case 24:return 72;
break;
case 25:return 75;
break;
case 26:return 73;
break;
case 27:return 76;
break;
case 28:return 77;
break;
case 29:return 78;
break;
case 30:return 41;
break;
case 31:return 42;
break;
case 32:return 19;
break;
case 33:return 23;
break;
case 34:return 24;
break;
case 35:return 80;
break;
case 36:return 82;
break;
case 37:return 61;
break;
case 38:return 62;
break;
case 39:return 28;
break;
case 40:return 29;
break;
case 41:return 30;
break;
case 42:return 64;
break;
case 43:return 37;
break;
case 44:return 9;
break;
case 45:return 14;
break;
case 46:return 'RPUBLIC';
break;
case 47:return 'RPRIVATE';
break;
case 48:return 'RPROTECTED';
break;
case 49:return 'RSTATIC';
break;
case 50:return 'RMAIN';
break;
case 51:return 'RARGS';
break;
case 52:return 67;
break;
case 53:return 68;
break;
case 54:return 25;
break;
case 55:return 27;
break;
case 56:return 'CORIZQ';
break;
case 57:return 'CORDER';
break;
case 58:return 17;
break;
case 59:return "COMA";
break;
case 60:return 13;
break;
case 61:return 81;
break;
case 62:return 10;
break;
case 63:return 12;
break;
case 64:return 66;
break;
case 65:return 65;
break;
case 66:return 18;
break;
case 67: yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 ); return 44; 
break;
case 68:return 5;
break;
case 69:console.error('Este es un error l√©xico: \"' + yy_.yytext + '\", en la linea: '+ yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
    cErrores.errores.addError(new cNodoError.nodoError("Lexico", "Caracter desconocido: "+yy_.yytext,yy_.yylineno));
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\r)/,/^(?:\\\\)/,/^(?:\\")/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:args\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:"[^\"]*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
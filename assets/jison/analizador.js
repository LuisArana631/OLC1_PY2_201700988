/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,15],$V2=[1,9],$V3=[1,4],$V4=[1,5],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,18],$Vb=[1,6],$Vc=[1,7],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,22],$Vh=[1,23],$Vi=[2,5,10,11,19,22,25,29,33,34,35,36,43,44,60,61,62,63,67],$Vj=[1,33],$Vk=[1,34],$Vl=[1,39],$Vm=[1,44],$Vn=[1,45],$Vo=[1,55],$Vp=[1,53],$Vq=[1,47],$Vr=[1,57],$Vs=[1,58],$Vt=[1,50],$Vu=[1,51],$Vv=[1,64],$Vw=[21,24,58],$Vx=[2,111],$Vy=[13,21,45,49,50,51,52,53,72,73,76,77,78,79,80,81,84],$Vz=[1,79],$VA=[1,75],$VB=[1,72],$VC=[1,76],$VD=[1,68],$VE=[1,98],$VF=[1,90],$VG=[1,87],$VH=[1,88],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,95],$VN=[1,99],$VO=[1,100],$VP=[1,101],$VQ=[1,107],$VR=[13,21,45,84],$VS=[1,108],$VT=[1,109],$VU=[1,110],$VV=[1,111],$VW=[1,112],$VX=[13,21,45,58,72,73,76,77,78,79,80,81,84],$VY=[13,21,45,49,50,51,52,53,84],$VZ=[1,114],$V_=[2,115],$V$=[13,21,45,49,50,51,52,53,58,72,73,76,77,78,79,80,81,84],$V01=[1,120],$V11=[1,129],$V21=[1,130],$V31=[1,133],$V41=[13,80,81],$V51=[13,21,80,81],$V61=[13,21,72,73,80,81],$V71=[13,21,72,73,76,77,78,79,80,81],$V81=[2,130],$V91=[1,140],$Va1=[1,141],$Vb1=[1,142],$Vc1=[1,143],$Vd1=[1,144],$Ve1=[1,145],$Vf1=[13,21,45,49,50,51,52,53,72,73,76,77,78,79,80,81],$Vg1=[2,5,10,11,19,22,25,28,29,32,33,34,35,36,43,44,60,61,62,63,64,65,66,67,83,85],$Vh1=[2,11,19,22,25,29,32,33,34,35,36,60,61,62,63,64,65,66,67,83,85],$Vi1=[2,10,11,19,22,25,29,32,33,34,35,36,60,61,62,63,64,65,66,67,83,85],$Vj1=[1,182],$Vk1=[1,183],$Vl1=[1,187],$Vm1=[2,10,11,19,22,25,29,32,33,34,35,36,60,61,62,63,64,65,66,67],$Vn1=[1,197],$Vo1=[1,216],$Vp1=[13,21,45,49,72,73,76,77,78,79,80,81],$Vq1=[13,58],$Vr1=[2,131],$Vs1=[2,132],$Vt1=[1,249],$Vu1=[1,250],$Vv1=[1,274],$Vw1=[32,83,85],$Vx1=[1,299],$Vy1=[80,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"especiales_sentencias":7,"sentencia_especial":8,"sentencia":9,"RVOID":10,"IDENTIFICADOR":11,"PARIZQ":12,"PARDER":13,"bloque_sentencias":14,"RMAIN":15,"parametros_fun":16,"tipo_dato":17,"sentencias":18,"RPRINTLN":19,"expresion_cadena":20,"PTOCOMA":21,"RPRINT":22,"lista_id":23,"IGUAL":24,"RIF":25,"expresion_logica":26,"lista_else_if":27,"RELSE":28,"RSWITCH":29,"LLAVIZQ":30,"casos":31,"LLAVDER":32,"RWHILE":33,"RDO":34,"RFOR":35,"RINT":36,"valor_numerico":37,"expresion_relacional":38,"INCREMENTO":39,"DECREMENTO":40,"incremento_decremento":41,"valor_transferencia":42,"RCLASS":43,"RIMPORT":44,"MAS":45,"CADENA":46,"valor_booleano":47,"aux_expresion_cadena":48,"MENOS":49,"MULTIPLICACION":50,"DIVISION":51,"MODULO":52,"POTENCIA":53,"llamada":54,"parametros":55,"expresion_numerica_par":56,"expresion_numerica":57,"COMA":58,"parametro":59,"RDOUBLE":60,"RBOOLEAN":61,"RCHAR":62,"RSTRING":63,"RBREAK":64,"RRETURN":65,"RCONTINUE":66,"ENTERO":67,"DECIMAL":68,"RTRUE":69,"RFALSE":70,"expresion_may_men":71,"IGUALDAD":72,"DISTINTO":73,"NOT":74,"valores_expresion_relacional":75,"MAYOR":76,"MENOR":77,"MAYORIGUAL":78,"MENORIGUAL":79,"AND":80,"OR":81,"caso_eval":82,"RCASE":83,"DOSPTS":84,"RDEFAULT":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"RVOID",11:"IDENTIFICADOR",12:"PARIZQ",13:"PARDER",15:"RMAIN",19:"RPRINTLN",21:"PTOCOMA",22:"RPRINT",24:"IGUAL",25:"RIF",28:"RELSE",29:"RSWITCH",30:"LLAVIZQ",32:"LLAVDER",33:"RWHILE",34:"RDO",35:"RFOR",36:"RINT",39:"INCREMENTO",40:"DECREMENTO",43:"RCLASS",44:"RIMPORT",45:"MAS",46:"CADENA",49:"MENOS",50:"MULTIPLICACION",51:"DIVISION",52:"MODULO",53:"POTENCIA",58:"COMA",60:"RDOUBLE",61:"RBOOLEAN",62:"RCHAR",63:"RSTRING",64:"RBREAK",65:"RRETURN",66:"RCONTINUE",67:"ENTERO",68:"DECIMAL",69:"RTRUE",70:"RFALSE",72:"IGUALDAD",73:"DISTINTO",74:"NOT",76:"MAYOR",77:"MENOR",78:"MAYORIGUAL",79:"MENORIGUAL",80:"AND",81:"OR",83:"RCASE",84:"DOSPTS",85:"RDEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[8,1],[8,5],[8,5],[8,6],[8,5],[8,6],[18,2],[18,1],[9,5],[9,5],[9,3],[9,5],[9,4],[9,8],[9,6],[9,7],[9,5],[9,7],[9,5],[9,7],[9,14],[9,14],[9,13],[9,13],[9,2],[9,2],[9,1],[6,5],[6,5],[6,5],[6,4],[6,3],[6,3],[6,5],[6,4],[6,8],[6,6],[6,7],[6,5],[6,7],[6,5],[6,7],[6,14],[6,14],[6,13],[6,13],[6,5],[6,5],[6,6],[6,5],[6,6],[6,2],[6,1],[20,3],[20,1],[20,1],[20,1],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,3],[48,1],[48,1],[48,1],[54,4],[54,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,2],[56,1],[56,1],[56,1],[56,1],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,2],[57,1],[57,1],[57,1],[57,1],[55,3],[55,1],[59,1],[59,1],[59,1],[59,1],[59,1],[17,1],[17,1],[17,1],[17,1],[17,1],[23,3],[23,1],[42,1],[42,2],[42,1],[37,1],[37,1],[47,1],[47,1],[38,3],[38,3],[38,2],[38,1],[71,3],[71,3],[71,3],[71,3],[71,1],[75,1],[75,1],[75,1],[26,3],[26,3],[26,6],[26,6],[26,1],[31,2],[31,1],[82,4],[82,3],[14,3],[14,2],[27,7],[27,6],[41,2],[41,2],[41,2],[41,2],[16,4],[16,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 12:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 5: case 13: case 111: case 137:
 this.$ = [$$[$0]]; 
break;
case 4:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 6:
 this.$ = $$[$0] 
break;
case 7: case 8: case 10: case 52: case 53: case 55:
 this.$ = instruccionesAPI.nuevaDeclaracionFun($$[$0-4],$$[$0-3],$$[$0]); 
break;
case 9: case 11: case 54: case 56:
 this.$ = instruccionesAPI.nuevaDeclaracionFunParametros($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 14: case 33:
 this.$ = instruccionesAPI.nuevoPrintln($$[$0-2]); 
break;
case 15: case 34:
 this.$ = instruccionesAPI.nuevoPrint($$[$0-2]); 
break;
case 16: case 38:
 this.$ = instruccionesAPI.nuevoDeclaracionVar($$[$0-1],$$[$0-2]); 
break;
case 17: case 39:
 this.$ = instruccionesAPI.nuevoDeclaracionVarValor($$[$0-3],$$[$0-4],$$[$0-1]); 
break;
case 18: case 40:
 this.$ = instruccionesAPI.nuevaAsignacion($$[$0-3],$$[$0-1]); 
break;
case 19: case 41:
 this.$ = instruccionesAPI.nuevoIfElseListElseIf($$[$0-5],$$[$0-3],$$[$0],$$[$0-2]); 
break;
case 20: case 42:
 this.$ = instruccionesAPI.nuevoIfListElseIf($$[$0-3],$$[$0-1],$$[$0]); 
break;
case 21: case 43:
 this.$ = instruccionesAPI.nuevoElse($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 22: case 44:
 this.$ = instruccionesAPI.nuevoIf($$[$0-2],$$[$0]); 
break;
case 23: case 45:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]); 
break;
case 24: case 46:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-2],$$[$0]); 
break;
case 25: case 47:
 this.$ = instruccionesAPI.nuevoDoWhile($$[$0-2],$$[$0-5]); 
break;
case 26: case 27: case 28: case 29: case 48: case 49: case 50: case 51:
 this.$ = instruccionesAPI.nuevoFor($$[$0-10],$$[$0-8],$$[$0-6],$$[$0-3],$$[$0]); 
break;
case 30: case 31: case 57: case 69: case 92:
 this.$ = $$[$0-1]; 
break;
case 32: case 58:
 cErrores.errores.addError(new cNodoError.nodoError("Sintactico","No se esperaba el caracter: "+$$[$0],this._$.first_line,$$[$0])); this.$ = instruccionesAPI.nuevoError($$[$0]);
break;
case 35:
 this.$ = instruccionesAPI.nuevaClaseInstrucciones($$[$0-3],$$[$0-1]); 
break;
case 36:
 this.$ = instruccionesAPI.nuevaClase($$[$0-2]); 
break;
case 37:
 this.$ = instruccionesAPI.nuevoImport($$[$0-1]); 
break;
case 59: case 75: case 86:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA); 
break;
case 60: case 101:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.CADENA); 
break;
case 61: case 62: case 68: case 70: case 72: case 82: case 83: case 85: case 94: case 95: case 97: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 112: case 114: case 122: case 127: case 129: case 130: case 135:
 this.$ = $$[$0]; 
break;
case 63: case 76: case 87:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA); 
break;
case 64: case 77: case 88:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION); 
break;
case 65: case 78: case 89:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION); 
break;
case 66: case 79: case 90:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO); 
break;
case 67: case 80: case 91:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA); 
break;
case 71: case 84: case 96: case 100:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR); 
break;
case 73:
 this.$ = instruccionesAPI.nuevaInstanciaParametros($$[$0-3],$$[$0-1]); 
break;
case 74:
 this.$ = instruccionesAPI.nuevaInstancia($$[$0-2]); 
break;
case 81: case 93:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 98:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 99:
 this.$ = [$$[$0]]
break;
case 110:
 $$[$0-2].push($$[$0]);  this.$ = $$[$0-2]; 
break;
case 113:
 this.$ = instruccionesAPI.nuevoReturn($$[$0]); 
break;
case 115: case 116:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.NUMERO); 
break;
case 117: case 118:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.BOOLEAN); 
break;
case 119:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUALDAD); 
break;
case 120:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DISTINTO); 
break;
case 121:
 this.$ = instruccionesAPI.nuevaNegacion($$[$0]); 
break;
case 123:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 124:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 125:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 126:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 128:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 131:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND); 
break;
case 132:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR); 
break;
case 133:
 this.$ = instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.AND), TIPO_OPERACION.NOT); 
break;
case 134:
 this.$ = instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.OR), TIPO_OPERACION.NOT); 
break;
case 136:
 $$[$0-1].push($$[$0]); this.$ =$$[$0-1]; 
break;
case 138:
 this.$ = instruccionesAPI.nuevoCase($$[$0-2],$$[$0]); 
break;
case 139:
 this.$ = instruccionesAPI.nuevoDefault($$[$0]); 
break;
case 140:
 this.$ = instruccionesAPI.nuevoBloqueSentencias($$[$0-1]); 
break;
case 141:
 this.$ = instruccionesAPI.nuevoBloqueSentencias(undefined) 
break;
case 142:
 $$[$0-6].push(instruccionesAPI.nuevoIf($$[$0-2],$$[$0])); this.$ = $$[$0-6]; 
break;
case 143:
 this.$ = [instruccionesAPI.nuevoIf($$[$0-2],$$[$0])]; 
break;
case 144: case 146:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0-1],TIPO_OPERACION.INCREMENTO); 
break;
case 145: case 147:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0-1],TIPO_OPERACION.DECREMENTO); 
break;
case 148:
 $$[$0-3].push(instruccionesAPI.nuevoParametroFun($$[$0-1],$$[$0])); this.$ = $$[$0-3] 
break;
case 149:
 this.$ = [instruccionesAPI.nuevoParametroFun($$[$0-1],$$[$0])]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,10:$V1,11:$V2,17:8,19:$V3,22:$V4,25:$V5,29:$V6,33:$V7,34:$V8,35:$V9,36:$Va,41:16,43:$Vb,44:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,67:$Vh},{1:[3]},{2:$V0,5:[1,24],6:25,10:$V1,11:$V2,17:8,19:$V3,22:$V4,25:$V5,29:$V6,33:$V7,34:$V8,35:$V9,36:$Va,41:16,43:$Vb,44:$Vc,60:$Vd,61:$Ve,62:$Vf,63:$Vg,67:$Vh},o($Vi,[2,3]),{12:[1,26]},{12:[1,27]},{11:[1,28]},{11:[1,29]},{11:[1,31],23:30},{24:[1,32],39:$Vj,40:$Vk},{12:[1,35]},{12:[1,36]},{12:[1,37]},{14:38,30:$Vl},{12:[1,40]},{11:[1,41],15:[1,42]},{21:[1,43]},o($Vi,[2,58]),{11:[2,105]},{11:[2,106]},{11:[2,107]},{11:[2,108]},{11:[2,109]},{39:$Vm,40:$Vn},{1:[2,1]},o($Vi,[2,2]),{11:$Vo,12:$Vp,20:46,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{11:$Vo,12:$Vp,20:59,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{30:[1,60]},{21:[1,61]},{21:[1,62],24:[1,63],58:$Vv},o($Vw,$Vx,{12:[1,65]}),{11:$Vo,12:$Vp,20:66,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},o($Vy,[2,144]),o($Vy,[2,145]),{11:$Vz,12:$VA,26:67,37:78,38:69,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$VD,75:71},{11:$Vo,12:$Vp,20:81,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{11:$Vz,12:$VA,26:82,37:78,38:69,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$VD,75:71},{33:[1,83]},{2:$VE,9:86,11:$VF,17:89,18:84,19:$VG,22:$VH,25:$VI,29:$VJ,32:[1,85],33:$VK,34:$VL,35:$VM,36:$Va,41:96,42:97,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VN,65:$VO,66:$VP,67:$Vh},{11:[1,103],36:[1,102]},{12:[1,104]},{12:[1,105]},o($Vi,[2,57]),o($Vy,[2,146]),o($Vy,[2,147]),{13:[1,106],45:$VQ},o($VR,[2,60]),o($VR,[2,61]),o($VR,[2,62],{49:$VS,50:$VT,51:$VU,52:$VV,53:$VW}),o($VX,[2,117]),o($VX,[2,118]),o($VY,[2,68]),{11:$Vo,12:$Vp,37:54,41:52,48:113,54:56,67:$Vr,68:$Vs},o($VY,[2,70]),o($VY,[2,71],{12:$VZ,39:$Vj,40:$Vk}),o($VY,[2,72]),o($Vy,$V_,{39:$Vm,40:$Vn}),o($V$,[2,116]),{13:[1,115],45:$VQ},{2:$VE,7:116,8:118,9:119,10:$V01,11:$VF,17:121,19:$VG,22:$VH,25:$VI,29:$VJ,32:[1,117],33:$VK,34:$VL,35:$VM,36:$Va,41:96,42:97,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VN,65:$VO,66:$VP,67:$Vh},o($Vi,[2,37]),o($Vi,[2,38]),{11:$Vo,12:$Vp,20:122,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{11:[1,123]},{13:[1,124],16:125,17:126,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg},{21:[1,127],45:$VQ},{13:[1,128],80:$V11,81:$V21},{11:$Vz,12:[1,131],37:78,38:132,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$V31,75:71},o($V41,[2,135]),o($V51,[2,122],{72:[1,134],73:[1,135]}),o($V61,[2,127],{76:[1,136],77:[1,137],78:[1,138],79:[1,139]}),o($V71,[2,128]),o($V71,[2,129]),o($V71,$V81,{45:$V91,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1}),{11:$Vz,12:$VA,37:78,41:77,49:$VC,54:80,57:146,67:$Vr,68:$Vs},{11:$Vz,12:$VA,37:78,41:77,49:$VC,54:80,57:147,67:$Vr,68:$Vs},o($Vf1,[2,94]),o($Vf1,[2,95]),o($Vf1,[2,96],{12:$VZ,39:$Vj,40:$Vk}),o($Vf1,[2,97]),{13:[1,148],45:$VQ},{13:[1,149],80:$V11,81:$V21},{12:[1,150]},{2:$VE,9:152,11:$VF,17:89,19:$VG,22:$VH,25:$VI,29:$VJ,32:[1,151],33:$VK,34:$VL,35:$VM,36:$Va,41:96,42:97,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VN,65:$VO,66:$VP,67:$Vh},o($Vg1,[2,141]),o($Vh1,[2,13]),{12:[1,153]},{12:[1,154]},{11:[1,156],23:155},{24:[1,157],39:$Vj,40:$Vk},{12:[1,158]},{12:[1,159]},{12:[1,160]},{14:161,30:$Vl},{12:[1,162]},{21:[1,163]},{21:[1,164]},o($Vi1,[2,32]),{21:[2,112]},{11:$Vo,12:$Vp,20:165,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{21:[2,114]},{11:[1,166]},{24:[1,167]},{13:[1,168],16:169,17:126,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg},{13:[1,170]},{21:[1,171]},{11:$Vo,12:$Vp,20:172,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{11:$Vo,12:$Vp,37:54,41:52,48:173,54:56,67:$Vr,68:$Vs},{11:$Vo,12:$Vp,37:54,41:52,48:174,54:56,67:$Vr,68:$Vs},{11:$Vo,12:$Vp,37:54,41:52,48:175,54:56,67:$Vr,68:$Vs},{11:$Vo,12:$Vp,37:54,41:52,48:176,54:56,67:$Vr,68:$Vs},{11:$Vo,12:$Vp,37:54,41:52,48:177,54:56,67:$Vr,68:$Vs},{13:[1,178],49:$VS,50:$VT,51:$VU,52:$VV,53:$VW},{11:$Vj1,13:[1,180],37:184,46:$Vk1,47:185,54:186,55:179,59:181,67:$Vl1,68:$Vs,69:$Vt,70:$Vu},{21:[1,188]},{2:$VE,8:190,9:119,10:$V01,11:$VF,17:121,19:$VG,22:$VH,25:$VI,29:$VJ,32:[1,189],33:$VK,34:$VL,35:$VM,36:$Va,41:96,42:97,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VN,65:$VO,66:$VP,67:$Vh},o($Vi,[2,36]),o($Vm1,[2,5]),o($Vm1,[2,6]),{11:[1,191],15:[1,192]},{11:[1,193],23:155},{21:[1,194],45:$VQ},o($Vw,[2,110]),{14:195,30:$Vl},{13:[1,196],58:$Vn1},{11:[1,198]},o($Vi,[2,40]),{14:199,30:$Vl},{11:$Vz,12:$VA,37:78,38:200,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$V31,75:71},{11:$Vz,12:$VA,37:78,38:201,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$V31,75:71},{11:$Vz,12:$VA,26:202,37:78,38:69,41:77,46:$VB,47:73,49:$VC,54:80,57:203,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$VD,75:71},o($V51,[2,121]),{11:$Vz,12:$VA,37:78,38:132,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$V31,75:71},{11:$Vz,12:$VA,37:78,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:204,75:71},{11:$Vz,12:$VA,37:78,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:205,75:71},{11:$Vz,12:$VA,37:78,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,75:206},{11:$Vz,12:$VA,37:78,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,75:207},{11:$Vz,12:$VA,37:78,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,75:208},{11:$Vz,12:$VA,37:78,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,75:209},{11:$Vz,12:$VA,37:78,41:77,49:$VC,54:80,57:210,67:$Vr,68:$Vs},{11:$Vz,12:$VA,37:78,41:77,49:$VC,54:80,57:211,67:$Vr,68:$Vs},{11:$Vz,12:$VA,37:78,41:77,49:$VC,54:80,57:212,67:$Vr,68:$Vs},{11:$Vz,12:$VA,37:78,41:77,49:$VC,54:80,57:213,67:$Vr,68:$Vs},{11:$Vz,12:$VA,37:78,41:77,49:$VC,54:80,57:214,67:$Vr,68:$Vs},{11:$Vz,12:$VA,37:78,41:77,49:$VC,54:80,57:215,67:$Vr,68:$Vs},{13:$Vo1,45:$V91,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1},o($Vp1,[2,93],{50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1}),{30:[1,217]},{14:218,30:$Vl},{11:$Vz,12:$VA,26:219,37:78,38:69,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$VD,75:71},o($Vg1,[2,140]),o($Vh1,[2,12]),{11:$Vo,12:$Vp,20:220,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{11:$Vo,12:$Vp,20:221,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{21:[1,222],24:[1,223],58:$Vv},o($Vw,$Vx),{11:$Vo,12:$Vp,20:224,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{11:$Vz,12:$VA,26:225,37:78,38:69,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$VD,75:71},{11:$Vo,12:$Vp,20:226,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{11:$Vz,12:$VA,26:227,37:78,38:69,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$VD,75:71},{33:[1,228]},{11:[1,230],36:[1,229]},o($Vi1,[2,30]),o($Vi1,[2,31]),{21:[2,113],45:$VQ},{24:[1,231]},{37:232,67:$Vl1,68:$Vs},{14:233,30:$Vl},{13:[1,234],58:$Vn1},{14:235,30:$Vl},o($Vi,[2,33]),o($VR,[2,59]),o([13,21,45,49,84],[2,63],{50:$VT,51:$VU,52:$VV,53:$VW}),o($VY,[2,64]),o($VY,[2,65]),o($VY,[2,66]),o($VY,[2,67]),o($VY,[2,69]),{13:[1,236],58:[1,237]},o($V$,[2,74]),o($Vq1,[2,99]),o($Vq1,[2,100],{12:$VZ}),o($Vq1,[2,101]),o($Vq1,[2,102]),o($Vq1,[2,103]),o($Vq1,[2,104]),o([13,21,58],$V_),o($Vi,[2,34]),o($Vi,[2,35]),o($Vm1,[2,4]),{12:[1,238]},{12:[1,239]},o($Vw,$Vx,{12:[1,240]}),o($Vi,[2,39]),o($Vi,[2,55]),{14:241,30:$Vl},{17:242,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg},o($Vq1,[2,149]),o($Vi,[2,44],{27:243,28:[1,244]}),o($V41,$Vr1),o($V41,$Vs1),{80:[1,245],81:[1,246]},o([72,73,76,77,78,79,80,81],$V81,{13:$Vo1,45:$V91,49:$Va1,50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1}),o($V51,[2,119]),o($V51,[2,120]),o($V61,[2,123]),o($V61,[2,124]),o($V61,[2,125]),o($V61,[2,126]),o($Vp1,[2,86],{50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1}),o($Vp1,[2,87],{50:$Vb1,51:$Vc1,52:$Vd1,53:$Ve1}),o($Vf1,[2,88]),o($Vf1,[2,89]),o($Vf1,[2,90]),o($Vf1,[2,91]),o($Vf1,[2,92]),{31:247,82:248,83:$Vt1,85:$Vu1},o($Vi,[2,46]),{13:[1,251],80:$V11,81:$V21},{13:[1,252],45:$VQ},{13:[1,253],45:$VQ},o($Vi1,[2,16]),{11:$Vo,12:$Vp,20:254,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{21:[1,255],45:$VQ},{13:[1,256],80:$V11,81:$V21},{13:[1,257],45:$VQ},{13:[1,258],80:$V11,81:$V21},{12:[1,259]},{11:[1,260]},{24:[1,261]},{37:262,67:$Vl1,68:$Vs},{21:[1,263]},o($Vi,[2,52]),{14:264,30:$Vl},o($Vi,[2,53]),o($V$,[2,73]),{11:$Vj1,37:184,46:$Vk1,47:185,54:186,59:265,67:$Vl1,68:$Vs,69:$Vt,70:$Vu},{13:[1,266],16:267,17:126,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg},{13:[1,268]},{13:[1,269],16:270,17:126,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg},o($Vi,[2,56]),{11:[1,271]},o($Vi,[2,42],{28:[1,272]}),{14:273,25:$Vv1,30:$Vl},{11:$Vz,12:$VA,37:78,38:275,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$V31,75:71},{11:$Vz,12:$VA,37:78,38:276,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$V31,75:71},{32:[1,277],82:278,83:$Vt1,85:$Vu1},o($Vw1,[2,137]),{11:$Vo,12:$Vp,20:279,37:54,41:52,46:$Vq,47:48,48:49,54:56,67:$Vr,68:$Vs,69:$Vt,70:$Vu},{84:[1,280]},{21:[1,281]},{21:[1,282]},{21:[1,283]},{21:[1,284],45:$VQ},o($Vi1,[2,18]),{14:285,30:$Vl},{30:[1,286]},{14:287,30:$Vl},{11:$Vz,12:$VA,26:288,37:78,38:69,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$VD,75:71},{24:[1,289]},{37:290,67:$Vl1,68:$Vs},{21:[1,291]},{11:$Vz,12:$VA,37:78,38:292,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$V31,75:71},o($Vi,[2,54]),o($Vq1,[2,98]),{14:293,30:$Vl},{13:[1,294],58:$Vn1},{14:295,30:$Vl},{14:296,30:$Vl},{13:[1,297],58:$Vn1},o($Vq1,[2,148]),{14:298,25:$Vx1,30:$Vl},o($Vi,[2,43]),{12:[1,300]},o($Vy1,$Vr1,{13:[1,301]}),o($Vy1,$Vs1,{13:[1,302]}),o($Vi,[2,45]),o($Vw1,[2,136]),{45:$VQ,84:[1,303]},{2:$VE,9:86,11:$VF,17:89,18:304,19:$VG,22:$VH,25:$VI,29:$VJ,33:$VK,34:$VL,35:$VM,36:$Va,41:96,42:97,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VN,65:$VO,66:$VP,67:$Vh},o($Vi,[2,47]),o($Vi1,[2,14]),o($Vi1,[2,15]),o($Vi1,[2,17]),o($Vi1,[2,22],{27:305,28:[1,306]}),{31:307,82:248,83:$Vt1,85:$Vu1},o($Vi1,[2,24]),{13:[1,308],80:$V11,81:$V21},{37:309,67:$Vl1,68:$Vs},{21:[1,310]},{11:$Vz,12:$VA,37:78,38:311,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$V31,75:71},{21:[1,312]},o($Vm1,[2,7]),{14:313,30:$Vl},o($Vm1,[2,8]),o($Vm1,[2,10]),{14:314,30:$Vl},o($Vi,[2,41]),{12:[1,315]},{11:$Vz,12:$VA,26:316,37:78,38:69,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$VD,75:71},o($V41,[2,133]),o($V41,[2,134]),{2:$VE,9:86,11:$VF,17:89,18:317,19:$VG,22:$VH,25:$VI,29:$VJ,33:$VK,34:$VL,35:$VM,36:$Va,41:96,42:97,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VN,65:$VO,66:$VP,67:$Vh},o($Vw1,[2,139],{17:89,41:96,42:97,9:152,2:$VE,11:$VF,19:$VG,22:$VH,25:$VI,29:$VJ,33:$VK,34:$VL,35:$VM,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VN,65:$VO,66:$VP,67:$Vh}),o($Vi1,[2,20],{28:[1,318]}),{14:319,25:$Vv1,30:$Vl},{32:[1,320],82:278,83:$Vt1,85:$Vu1},{21:[1,321]},{21:[1,322]},{11:$Vz,12:$VA,37:78,38:323,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$V31,75:71},{21:[1,324]},{11:[1,325]},o($Vm1,[2,9]),o($Vm1,[2,11]),{11:$Vz,12:$VA,26:326,37:78,38:69,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$VD,75:71},{13:[1,327],80:$V11,81:$V21},o($Vw1,[2,138],{17:89,41:96,42:97,9:152,2:$VE,11:$VF,19:$VG,22:$VH,25:$VI,29:$VJ,33:$VK,34:$VL,35:$VM,36:$Va,60:$Vd,61:$Ve,62:$Vf,63:$Vg,64:$VN,65:$VO,66:$VP,67:$Vh}),{14:328,25:$Vx1,30:$Vl},o($Vi1,[2,21]),o($Vi1,[2,23]),o($Vi1,[2,25]),{11:$Vz,12:$VA,37:78,38:329,41:77,46:$VB,47:73,49:$VC,54:80,57:74,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:70,74:$V31,75:71},{21:[1,330]},{11:[1,331]},{39:[1,332],40:[1,333]},{13:[1,334],80:$V11,81:$V21},{14:335,30:$Vl},o($Vi1,[2,19]),{21:[1,336]},{11:[1,337]},{39:[1,338],40:[1,339]},{21:[1,340]},{21:[1,341]},{14:342,30:$Vl},o($Vg1,[2,143]),{11:[1,343]},{39:[1,344],40:[1,345]},{21:[1,346]},{21:[1,347]},{13:[1,348]},{13:[1,349]},o($Vg1,[2,142]),{39:[1,350],40:[1,351]},{21:[1,352]},{21:[1,353]},{13:[1,354]},{13:[1,355]},{14:356,30:$Vl},{14:357,30:$Vl},{21:[1,358]},{21:[1,359]},{13:[1,360]},{13:[1,361]},{14:362,30:$Vl},{14:363,30:$Vl},o($Vi,[2,50]),o($Vi,[2,51]),{13:[1,364]},{13:[1,365]},{14:366,30:$Vl},{14:367,30:$Vl},o($Vi,[2,48]),o($Vi,[2,49]),{14:368,30:$Vl},{14:369,30:$Vl},o($Vi1,[2,28]),o($Vi1,[2,29]),o($Vi1,[2,26]),o($Vi1,[2,27])],
defaultActions: {18:[2,105],19:[2,106],20:[2,107],21:[2,108],22:[2,109],24:[2,1],99:[2,112],101:[2,114]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const TIPO_VALOR = require('../js/instrucciones').TIPO_VALOR;
  const TIPO_OPERACION = require('../js/instrucciones').TIPO_OPERACION;
  const instruccionesAPI = require('../js/instrucciones').instruccionesAPI;
  const cErrores = require ('../js/errores');
  const cNodoError = require ('../js/nodoError');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORAR */
break;
case 1:/* IGNORAR COMENTARIO */
break;
case 2:/* IGNORAR COMENTARIO */
break;
case 3:return 36;
break;
case 4:return 60;
break;
case 5:return 61;
break;
case 6:return 62;
break;
case 7:return 63;
break;
case 8:return 'SALTOLINEA';
break;
case 9:return 'TABULADOR';
break;
case 10:return 'RETORNO';
break;
case 11:return 'BARRAINVER';
break;
case 12:return 'COMILLADOBLE';
break;
case 13:return 39;
break;
case 14:return 40;
break;
case 15:return 45;
break;
case 16:return 49;
break;
case 17:return 50;
break;
case 18:return 51;
break;
case 19:return 53;
break;
case 20:return 52;
break;
case 21:return 72;
break;
case 22:return 73;
break;
case 23:return 78;
break;
case 24:return 76;
break;
case 25:return 79;
break;
case 26:return 77;
break;
case 27:return 80;
break;
case 28:return 81;
break;
case 29:return 74;
break;
case 30:return 43;
break;
case 31:return 44;
break;
case 32:return 25;
break;
case 33:return 28;
break;
case 34:return 29;
break;
case 35:return 83;
break;
case 36:return 85;
break;
case 37:return 64;
break;
case 38:return 65;
break;
case 39:return 33;
break;
case 40:return 34;
break;
case 41:return 35;
break;
case 42:return 66;
break;
case 43:return 10;
break;
case 44:return 19;
break;
case 45:return 22;
break;
case 46:return 'RPUBLIC';
break;
case 47:return 'RPRIVATE';
break;
case 48:return 'RPROTECTED';
break;
case 49:return 'RSTATIC';
break;
case 50:return 15;
break;
case 51:return 'RARGS';
break;
case 52:return 69;
break;
case 53:return 70;
break;
case 54:return 30;
break;
case 55:return 32;
break;
case 56:return 'CORIZQ';
break;
case 57:return 'CORDER';
break;
case 58:return 24;
break;
case 59:return "COMA";
break;
case 60:return 21;
break;
case 61:return 84;
break;
case 62:return 12;
break;
case 63:return 13;
break;
case 64:return 68;
break;
case 65:return 67;
break;
case 66:return 11;
break;
case 67: yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 ); return 46; 
break;
case 68:return 5;
break;
case 69:cErrores.errores.addError(new cNodoError.nodoError("Lexico","Caracter desconocido",yy_.yylloc.first_line,yy_.yytext))
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\r)/,/^(?:\\\\)/,/^(?:\\")/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:args\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:"[^\"]*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
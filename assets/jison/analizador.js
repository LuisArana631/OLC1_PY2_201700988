/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,9],$V5=[1,7],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[2,5,7,12,13,14,16,17,21,26,28,44,45,46,47,48,50,51,53,70,72],$Vf=[1,37],$Vg=[1,39],$Vh=[1,32],$Vi=[1,41],$Vj=[1,42],$Vk=[1,35],$Vl=[1,36],$Vm=[11,20,42],$Vn=[1,57],$Vo=[1,59],$Vp=[1,54],$Vq=[1,51],$Vr=[1,64],$Vs=[2,5,7,10,11,12,13,14,16,17,21,26,28,29,44,45,46,47,48,50,51,53,70,71,72],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[2,5,7,10,11,12,13,14,16,17,21,26,28,29,42,44,45,46,47,48,50,51,53,60,61,62,63,64,65,66,67,70,71,72],$Vz=[2,5,7,10,11,12,13,14,16,17,21,26,28,29,33,34,35,36,37,44,45,46,47,48,50,51,53,70,71,72],$VA=[1,71],$VB=[2,5,7,10,11,12,13,14,16,17,21,26,28,29,33,34,35,36,37,42,44,45,46,47,48,50,51,53,60,61,62,63,64,65,66,67,70,71,72],$VC=[1,78],$VD=[1,79],$VE=[10,66,67],$VF=[10,60,61,62,63,64,65,66,67],$VG=[2,74],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[10,29,33,34,35,36,37,60,61,62,63,64,65,66,67],$VO=[1,108],$VP=[1,109],$VQ=[1,117],$VR=[1,134],$VS=[10,42],$VT=[2,75],$VU=[2,76],$VV=[10,29,33,60,61,62,63,64,65,66,67],$VW=[1,147],$VX=[1,148],$VY=[2,5,7,12,13,14,16,17,21,25,26,28,44,45,46,47,48,50,51,53,70,72],$VZ=[16,70,72],$V_=[66,67],$V$=[1,171],$V01=[1,172],$V11=[1,173];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"RPRINTLN":7,"PARIZQ":8,"expresion_cadena":9,"PARDER":10,"PTOCOMA":11,"RPRINT":12,"RCLASS":13,"IDENTIFICADOR":14,"LLAVIZQ":15,"LLAVDER":16,"RIMPORT":17,"tipo_dato":18,"lista_id":19,"IGUAL":20,"RIF":21,"expresion_logica":22,"bloque_sentencias":23,"lista_else_if":24,"RELSE":25,"RSWITCH":26,"casos":27,"RWHILE":28,"MAS":29,"CADENA":30,"valor_booleano":31,"aux_expresion_cadena":32,"MENOS":33,"MULTIPLICACION":34,"DIVISION":35,"MODULO":36,"POTENCIA":37,"valor_numerico":38,"llamada":39,"parametros":40,"expresion_numerica":41,"COMA":42,"parametro":43,"RINT":44,"RDOUBLE":45,"RBOOLEAN":46,"RCHAR":47,"RSTRING":48,"valor_transferencia":49,"RBREAK":50,"RRETURN":51,"expresionCadena":52,"RCONTINUE":53,"ENTERO":54,"DECIMAL":55,"RTRUE":56,"RFALSE":57,"expresion_relacional":58,"valores_expresion_relacional":59,"IGUALDAD":60,"DISTINTO":61,"MAYOR":62,"MENOR":63,"MAYORIGUAL":64,"MENORIGUAL":65,"AND":66,"OR":67,"NOT":68,"caso_eval":69,"RCASE":70,"DOSPTS":71,"RDEFAULT":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RPRINTLN",8:"PARIZQ",10:"PARDER",11:"PTOCOMA",12:"RPRINT",13:"RCLASS",14:"IDENTIFICADOR",15:"LLAVIZQ",16:"LLAVDER",17:"RIMPORT",20:"IGUAL",21:"RIF",25:"RELSE",26:"RSWITCH",28:"RWHILE",29:"MAS",30:"CADENA",33:"MENOS",34:"MULTIPLICACION",35:"DIVISION",36:"MODULO",37:"POTENCIA",42:"COMA",44:"RINT",45:"RDOUBLE",46:"RBOOLEAN",47:"RCHAR",48:"RSTRING",50:"RBREAK",51:"RRETURN",52:"expresionCadena",53:"RCONTINUE",54:"ENTERO",55:"DECIMAL",56:"RTRUE",57:"RFALSE",60:"IGUALDAD",61:"DISTINTO",62:"MAYOR",63:"MENOR",64:"MAYORIGUAL",65:"MENORIGUAL",66:"AND",67:"OR",68:"NOT",70:"RCASE",71:"DOSPTS",72:"RDEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,5],[6,5],[6,4],[6,3],[6,3],[6,5],[6,3],[6,8],[6,6],[6,7],[6,5],[6,7],[6,5],[6,1],[9,3],[9,1],[9,1],[9,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,1],[32,1],[39,4],[39,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,1],[41,1],[41,1],[40,3],[40,1],[43,1],[43,1],[43,1],[43,1],[43,1],[18,1],[18,1],[18,1],[18,1],[18,1],[19,3],[19,1],[49,1],[49,2],[49,1],[38,1],[38,1],[31,1],[31,1],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,1],[59,1],[59,1],[59,1],[22,3],[22,3],[22,6],[22,6],[22,2],[22,1],[27,2],[27,1],[69,4],[69,6],[69,3],[69,5],[23,3],[23,2],[24,7],[24,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 57: case 82:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instruccionesAPI.nuevoPrintln($$[$0-2]); 
break;
case 5:
 this.$ = instruccionesAPI.nuevoPrint($$[$0-2]); 
break;
case 6:
 this.$ = instruccionesAPI.nuevaClaseInstrucciones($$[$0-3],$$[$0-1]); 
break;
case 7:
 this.$ = instruccionesAPI.nuevaClase($$[$0-2]); 
break;
case 8:
 this.$ = instruccionesAPI.nuevoImport($$[$0-1]); 
break;
case 9:
 this.$ = instruccionesAPI.nuevoDeclaracionVar($$[$0-1],$$[$0-2]); 
break;
case 10:
 this.$ = instruccionesAPI.nuevoDeclaracionVarValor($$[$0-3],$$[$0-4],$$[$0-1]); 
break;
case 11:
 this.$ = instruccionesAPI.nuevaAsignacion($$[$0-2],$$[$0]); 
break;
case 12:
 this.$ = instruccionesAPI.nuevoIfElseListElseIf($$[$0-5],$$[$0-3],$$[$0],$$[$0-2]); 
break;
case 13:
 this.$ = instruccionesAPI.nuevoIfListElseIf($$[$0-3],$$[$0-1],$$[$0]); 
break;
case 14:
 this.$ = instruccionesAPI.nuevoElse($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 15:
 this.$ = instruccionesAPI.nuevoIf($$[$0-2],$$[$0]); 
break;
case 16:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]); 
break;
case 17:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-2],$$[$0]); 
break;
case 18:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 19: case 34:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA); 
break;
case 20: case 47:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.CADENA); 
break;
case 21: case 22: case 29: case 31: case 41: case 43: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 58: case 60: case 71: case 73: case 74: case 80:
 this.$ = $$[$0]; 
break;
case 23: case 35:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA); 
break;
case 24: case 36:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION); 
break;
case 25: case 37:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION); 
break;
case 26: case 38:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO); 
break;
case 27: case 39:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA); 
break;
case 28: case 40:
 this.$ = $$[$0-1]; 
break;
case 30: case 42: case 46:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR); 
break;
case 32:
 this.$ = instruccionesAPI.nuevaInstanciaParametros($$[$0-3],$$[$0-1]); 
break;
case 33:
 this.$ = instruccionesAPI.nuevaInstancia($$[$0-2]); 
break;
case 44:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 45:
 this.$ = [$$[$0]]
break;
case 56:
 $$[$0-2].push($$[$0]);  this.$ = $$[$0-2]; 
break;
case 59:
 this.$ = instruccionesAPI.nuevoReturn($$[$0]); 
break;
case 61: case 62:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.NUMERO); 
break;
case 63: case 64:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.BOOLEAN); 
break;
case 65:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUALDAD); 
break;
case 66:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DISTINTO); 
break;
case 67:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 68:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 69:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 70:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 72:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 75:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND); 
break;
case 76:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR); 
break;
case 77:
 this.$ = instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.AND), TIPO_OPERACION.NOT); 
break;
case 78:
 this.$ = instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.OR), TIPO_OPERACION.NOT); 
break;
case 79:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 81:
 $$[$0-1].push($$[$0]); this.$ =$$[$0-1]; 
break;
case 83:
 this.$ = instruccionesAPI.nuevoCase($$[$0-2],$$[$0]); 
break;
case 84:
 this.$  = instruccionesAPI.nuevoCaseTransferencia($$[$0-4],$$[$0-2],$$[$0-1]); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoDefault($$[$0]); 
break;
case 86:
 this.$ = instruccionesAPI.nuevoDefaultTransferencia($$[$0-2],$$[$0-1]); 
break;
case 87:
 this.$ = instruccionesAPI.nuevoBloqueSentencias($$[$0-1]); 
break;
case 88:
 this.$ = instruccionesAPI.nuevoBloqueSentencias(undefined) 
break;
case 89:
 $$[$0-6].push(instruccionesAPI.nuevoIf($$[$0-2],$$[$0])); this.$ = $$[$0-6]; 
break;
case 90:
 this.$ = [instruccionesAPI.nuevoIf($$[$0-2],$$[$0])]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,18:8,21:$V6,26:$V7,28:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd},{1:[3]},{2:$V0,5:[1,19],6:20,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,18:8,21:$V6,26:$V7,28:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd},o($Ve,[2,3]),{8:[1,21]},{8:[1,22]},{14:[1,23]},{14:[1,24]},{14:[1,26],19:25},{20:[1,27]},{8:[1,28]},{8:[1,29]},{8:[1,30]},o($Ve,[2,18]),{14:[2,51]},{14:[2,52]},{14:[2,53]},{14:[2,54]},{14:[2,55]},{1:[2,1]},o($Ve,[2,2]),{8:$Vf,9:31,14:$Vg,30:$Vh,31:33,32:34,38:38,39:40,54:$Vi,55:$Vj,56:$Vk,57:$Vl},{8:$Vf,9:43,14:$Vg,30:$Vh,31:33,32:34,38:38,39:40,54:$Vi,55:$Vj,56:$Vk,57:$Vl},{15:[1,44]},{11:[1,45]},{11:[1,46],20:[1,47],42:[1,48]},o($Vm,[2,57]),{8:$Vf,9:49,14:$Vg,30:$Vh,31:33,32:34,38:38,39:40,54:$Vi,55:$Vj,56:$Vk,57:$Vl},{8:$Vn,14:$Vo,22:50,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:52,59:53,68:$Vq},{8:$Vf,9:61,14:$Vg,30:$Vh,31:33,32:34,38:38,39:40,54:$Vi,55:$Vj,56:$Vk,57:$Vl},{8:$Vn,14:$Vo,22:62,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:52,59:53,68:$Vq},{10:[1,63],29:$Vr},o($Vs,[2,20]),o($Vs,[2,21]),o($Vs,[2,22],{33:$Vt,34:$Vu,35:$Vv,36:$Vw,37:$Vx}),o($Vy,[2,63]),o($Vy,[2,64]),{8:$Vf,14:$Vg,32:70,38:38,39:40,54:$Vi,55:$Vj},o($Vz,[2,29]),o($Vz,[2,30],{8:$VA}),o($Vz,[2,31]),o($VB,[2,61]),o($VB,[2,62]),{10:[1,72],29:$Vr},{2:$V0,4:73,6:3,7:$V1,12:$V2,13:$V3,14:$V4,16:[1,74],17:$V5,18:8,21:$V6,26:$V7,28:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd},o($Ve,[2,8]),o($Ve,[2,9]),{8:$Vf,9:75,14:$Vg,30:$Vh,31:33,32:34,38:38,39:40,54:$Vi,55:$Vj,56:$Vk,57:$Vl},{14:[1,76]},o($Ve,[2,11],{29:$Vr}),{10:[1,77],66:$VC,67:$VD},{8:[1,80],14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:81,59:53},o($VE,[2,80]),o($VE,[2,71],{60:[1,82],61:[1,83],62:[1,84],63:[1,85],64:[1,86],65:[1,87]}),o($VF,[2,72]),o($VF,[2,73]),o($VF,$VG,{29:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM}),{8:$Vn,14:$Vo,38:58,39:60,41:94,54:$Vi,55:$Vj},o($VN,[2,41]),o($VN,[2,42],{8:$VA}),o($VN,[2,43]),{10:[1,95],29:$Vr},{10:[1,96],66:$VC,67:$VD},{11:[1,97]},{8:$Vf,9:98,14:$Vg,30:$Vh,31:33,32:34,38:38,39:40,54:$Vi,55:$Vj,56:$Vk,57:$Vl},{8:$Vf,14:$Vg,32:99,38:38,39:40,54:$Vi,55:$Vj},{8:$Vf,14:$Vg,32:100,38:38,39:40,54:$Vi,55:$Vj},{8:$Vf,14:$Vg,32:101,38:38,39:40,54:$Vi,55:$Vj},{8:$Vf,14:$Vg,32:102,38:38,39:40,54:$Vi,55:$Vj},{8:$Vf,14:$Vg,32:103,38:38,39:40,54:$Vi,55:$Vj},{10:[1,104],33:$Vt,34:$Vu,35:$Vv,36:$Vw,37:$Vx},{10:[1,106],14:$VO,30:$VP,31:111,38:110,39:112,40:105,43:107,54:$Vi,55:$Vj,56:$Vk,57:$Vl},{11:[1,113]},{2:$V0,6:20,7:$V1,12:$V2,13:$V3,14:$V4,16:[1,114],17:$V5,18:8,21:$V6,26:$V7,28:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd},o($Ve,[2,7]),{11:[1,115],29:$Vr},o($Vm,[2,56]),{15:$VQ,23:116},{8:$Vn,14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:118,59:53},{8:$Vn,14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:119,59:53},{8:$Vn,14:$Vo,22:120,30:$Vp,31:55,38:58,39:60,41:121,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:52,59:53,68:$Vq},o($VE,[2,79]),{8:$Vn,14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,59:122},{8:$Vn,14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,59:123},{8:$Vn,14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,59:124},{8:$Vn,14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,59:125},{8:$Vn,14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,59:126},{8:$Vn,14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,59:127},{8:$Vn,14:$Vo,38:58,39:60,41:128,54:$Vi,55:$Vj},{8:$Vn,14:$Vo,38:58,39:60,41:129,54:$Vi,55:$Vj},{8:$Vn,14:$Vo,38:58,39:60,41:130,54:$Vi,55:$Vj},{8:$Vn,14:$Vo,38:58,39:60,41:131,54:$Vi,55:$Vj},{8:$Vn,14:$Vo,38:58,39:60,41:132,54:$Vi,55:$Vj},{8:$Vn,14:$Vo,38:58,39:60,41:133,54:$Vi,55:$Vj},{10:$VR,29:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM},{15:[1,135]},{15:$VQ,23:136},o($Ve,[2,4]),o($Vs,[2,19]),o([2,5,7,10,11,12,13,14,16,17,21,26,28,29,33,44,45,46,47,48,50,51,53,70,71,72],[2,23],{34:$Vu,35:$Vv,36:$Vw,37:$Vx}),o($Vz,[2,24]),o($Vz,[2,25]),o($Vz,[2,26]),o($Vz,[2,27]),o($Vz,[2,28]),{10:[1,137],42:[1,138]},o($VB,[2,33]),o($VS,[2,45]),o($VS,[2,46],{8:$VA}),o($VS,[2,47]),o($VS,[2,48]),o($VS,[2,49]),o($VS,[2,50]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,10]),o($Ve,[2,15],{24:139,25:[1,140]}),{2:$V0,4:141,6:3,7:$V1,12:$V2,13:$V3,14:$V4,16:[1,142],17:$V5,18:8,21:$V6,26:$V7,28:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd},o($VE,$VT),o($VE,$VU),{66:[1,143],67:[1,144]},o([60,61,62,63,64,65,66,67],$VG,{10:$VR,29:$VH,33:$VI,34:$VJ,35:$VK,36:$VL,37:$VM}),o($VE,[2,65]),o($VE,[2,66]),o($VE,[2,67]),o($VE,[2,68]),o($VE,[2,69]),o($VE,[2,70]),o($VV,[2,34],{34:$VJ,35:$VK,36:$VL,37:$VM}),o($VV,[2,35],{34:$VJ,35:$VK,36:$VL,37:$VM}),o($VN,[2,36]),o($VN,[2,37]),o($VN,[2,38]),o($VN,[2,39]),o($VN,[2,40]),{27:145,69:146,70:$VW,72:$VX},o($Ve,[2,17]),o($VB,[2,32]),{14:$VO,30:$VP,31:111,38:110,39:112,43:149,54:$Vi,55:$Vj,56:$Vk,57:$Vl},o($Ve,[2,13],{25:[1,150]}),{15:$VQ,21:[1,152],23:151},{2:$V0,6:20,7:$V1,12:$V2,13:$V3,14:$V4,16:[1,153],17:$V5,18:8,21:$V6,26:$V7,28:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd},o($VY,[2,88]),{8:$Vn,14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:154,59:53},{8:$Vn,14:$Vo,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:155,59:53},{16:[1,156],69:157,70:$VW,72:$VX},o($VZ,[2,82]),{8:$Vf,9:158,14:$Vg,30:$Vh,31:33,32:34,38:38,39:40,54:$Vi,55:$Vj,56:$Vk,57:$Vl},{71:[1,159]},o($VS,[2,44]),{15:$VQ,21:[1,161],23:160},o($Ve,[2,14]),{8:[1,162]},o($VY,[2,87]),o($V_,$VT,{10:[1,163]}),o($V_,$VU,{10:[1,164]}),o($Ve,[2,16]),o($VZ,[2,81]),{29:$Vr,71:[1,165]},{2:$V0,4:166,6:3,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,18:8,21:$V6,26:$V7,28:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd},o($Ve,[2,12]),{8:[1,167]},{8:$Vn,14:$Vo,22:168,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:52,59:53,68:$Vq},o($VE,[2,77]),o($VE,[2,78]),{2:$V0,4:169,6:3,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,18:8,21:$V6,26:$V7,28:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd},o($VZ,[2,85],{18:8,6:20,49:170,2:$V0,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,21:$V6,26:$V7,28:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,50:$V$,51:$V01,53:$V11}),{8:$Vn,14:$Vo,22:174,30:$Vp,31:55,38:58,39:60,41:56,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:52,59:53,68:$Vq},{10:[1,175],66:$VC,67:$VD},o($VZ,[2,83],{18:8,6:20,49:176,2:$V0,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,21:$V6,26:$V7,28:$V8,44:$V9,45:$Va,46:$Vb,47:$Vc,48:$Vd,50:$V$,51:$V01,53:$V11}),{11:[1,177]},{11:[2,58]},{52:[1,178]},{11:[2,60]},{10:[1,179],66:$VC,67:$VD},{15:$VQ,23:180},{11:[1,181]},o($VZ,[2,86]),{11:[2,59]},{15:$VQ,23:182},o($VY,[2,90]),o($VZ,[2,84]),o($VY,[2,89])],
defaultActions: {14:[2,51],15:[2,52],16:[2,53],17:[2,54],18:[2,55],19:[2,1],171:[2,58],173:[2,60],178:[2,59]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const TIPO_VALOR = require('../js/instrucciones').TIPO_VALOR;
  const TIPO_OPERACION = require('../js/instrucciones').TIPO_OPERACION;
  const instruccionesAPI = require('../js/instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORAR */
break;
case 1:/* IGNORAR COMENTARIO */
break;
case 2:/* IGNORAR COMENTARIO */
break;
case 3:return 44;
break;
case 4:return 45;
break;
case 5:return 46;
break;
case 6:return 47;
break;
case 7:return 48;
break;
case 8:return 'SALTOLINEA';
break;
case 9:return 'TABULADOR';
break;
case 10:return 'RETORNO';
break;
case 11:return 'BARRAINVER';
break;
case 12:return 'COMILLADOBLE';
break;
case 13:return 29;
break;
case 14:return 33;
break;
case 15:return 34;
break;
case 16:return 35;
break;
case 17:return 37;
break;
case 18:return 36;
break;
case 19:return 'INCREMENTO';
break;
case 20:return 'DECREMENTO';
break;
case 21:return 60;
break;
case 22:return 61;
break;
case 23:return 62;
break;
case 24:return 64;
break;
case 25:return 63;
break;
case 26:return 65;
break;
case 27:return 66;
break;
case 28:return 67;
break;
case 29:return 68;
break;
case 30:return 13;
break;
case 31:return 17;
break;
case 32:return 21;
break;
case 33:return 25;
break;
case 34:return 26;
break;
case 35:return 70;
break;
case 36:return 72;
break;
case 37:return 50;
break;
case 38:return 51;
break;
case 39:return 28;
break;
case 40:return 'RDO';
break;
case 41:return 'RFOR';
break;
case 42:return 53;
break;
case 43:return 'RVOID';
break;
case 44:return 7;
break;
case 45:return 12;
break;
case 46:return 'RPUBLIC';
break;
case 47:return 'RPRIVATE';
break;
case 48:return 'RPROTECTED';
break;
case 49:return 'RSTATIC';
break;
case 50:return 'RMAIN';
break;
case 51:return 'RARGS';
break;
case 52:return 56;
break;
case 53:return 57;
break;
case 54:return 15;
break;
case 55:return 16;
break;
case 56:return 'CORIZQ';
break;
case 57:return 'CORDER';
break;
case 58:return 20;
break;
case 59:return "COMA";
break;
case 60:return 11;
break;
case 61:return 71;
break;
case 62:return 8;
break;
case 63:return 10;
break;
case 64:return 55;
break;
case 65:return 54;
break;
case 66:return 14;
break;
case 67: yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 ); return 30; 
break;
case 68:return 5;
break;
case 69:console.error('Este es un error l√©xico: \"' + yy_.yytext + '\", en la linea: '+ yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\r)/,/^(?:\\\\)/,/^(?:\\")/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:args\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:"[^\"]*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
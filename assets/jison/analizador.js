/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,9],$V5=[1,7],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,18],$Vc=[1,15],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,22],$Vh=[2,5,7,12,13,14,16,17,21,26,28,29,30,31,37,54,55,56,57,59,60,62,78,80],$Vi=[1,32],$Vj=[1,33],$Vk=[1,38],$Vl=[1,49],$Vm=[1,51],$Vn=[1,43],$Vo=[1,53],$Vp=[1,54],$Vq=[1,46],$Vr=[1,47],$Vs=[11,20,52],$Vt=[2,5,7,10,11,12,13,14,16,17,21,26,28,29,30,31,37,40,44,45,46,47,48,54,55,56,57,59,60,62,68,69,70,71,72,73,74,75,78,79,80],$Vu=[1,70],$Vv=[1,74],$Vw=[1,67],$Vx=[1,71],$Vy=[1,64],$Vz=[1,85],$VA=[2,5,7,10,11,12,13,14,16,17,21,26,28,29,30,31,37,40,54,55,56,57,59,60,62,78,79,80],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[2,5,7,10,11,12,13,14,16,17,21,26,28,29,30,31,37,40,52,54,55,56,57,59,60,62,68,69,70,71,72,73,74,75,78,79,80],$VH=[2,5,7,10,11,12,13,14,16,17,21,26,28,29,30,31,37,40,44,45,46,47,48,54,55,56,57,59,60,62,78,79,80],$VI=[1,92],$VJ=[2,5,7,10,11,12,13,14,16,17,21,26,28,29,30,31,37,40,44,45,46,47,48,52,54,55,56,57,59,60,62,68,69,70,71,72,73,74,75,78,79,80],$VK=[1,102],$VL=[1,103],$VM=[10,74,75],$VN=[10,11,74,75],$VO=[10,11,68,69,70,71,72,73,74,75],$VP=[2,87],$VQ=[1,112],$VR=[1,113],$VS=[1,114],$VT=[1,115],$VU=[1,116],$VV=[1,117],$VW=[10,11,40,44,45,46,47,48,68,69,70,71,72,73,74,75],$VX=[2,5,7,12,13,14,16,17,21,25,26,28,29,30,31,37,54,55,56,57,59,60,62,78,80],$VY=[1,139],$VZ=[1,140],$V_=[1,149],$V$=[1,168],$V01=[10,11,40,44,68,69,70,71,72,73,74,75],$V11=[10,52],$V21=[2,88],$V31=[2,89],$V41=[1,186],$V51=[1,187],$V61=[16,78,80],$V71=[74,75],$V81=[1,218],$V91=[1,219],$Va1=[1,220];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"RPRINTLN":7,"PARIZQ":8,"expresion_cadena":9,"PARDER":10,"PTOCOMA":11,"RPRINT":12,"RCLASS":13,"IDENTIFICADOR":14,"LLAVIZQ":15,"LLAVDER":16,"RIMPORT":17,"tipo_dato":18,"lista_id":19,"IGUAL":20,"RIF":21,"expresion_logica":22,"bloque_sentencias":23,"lista_else_if":24,"RELSE":25,"RSWITCH":26,"casos":27,"RWHILE":28,"RDO":29,"RFOR":30,"RINT":31,"valor_numerico":32,"expresion_relacional":33,"INCREMENTO":34,"DECREMENTO":35,"valo_numerico":36,"RVOID":37,"parametros_fun":38,"incremento_decremento":39,"MAS":40,"CADENA":41,"valor_booleano":42,"aux_expresion_cadena":43,"MENOS":44,"MULTIPLICACION":45,"DIVISION":46,"MODULO":47,"POTENCIA":48,"llamada":49,"parametros":50,"expresion_numerica":51,"COMA":52,"parametro":53,"RDOUBLE":54,"RBOOLEAN":55,"RCHAR":56,"RSTRING":57,"valor_transferencia":58,"RBREAK":59,"RRETURN":60,"expresionCadena":61,"RCONTINUE":62,"ENTERO":63,"DECIMAL":64,"RTRUE":65,"RFALSE":66,"valores_expresion_relacional":67,"IGUALDAD":68,"DISTINTO":69,"MAYOR":70,"MENOR":71,"MAYORIGUAL":72,"MENORIGUAL":73,"AND":74,"OR":75,"NOT":76,"caso_eval":77,"RCASE":78,"DOSPTS":79,"RDEFAULT":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RPRINTLN",8:"PARIZQ",10:"PARDER",11:"PTOCOMA",12:"RPRINT",13:"RCLASS",14:"IDENTIFICADOR",15:"LLAVIZQ",16:"LLAVDER",17:"RIMPORT",20:"IGUAL",21:"RIF",25:"RELSE",26:"RSWITCH",28:"RWHILE",29:"RDO",30:"RFOR",31:"RINT",34:"INCREMENTO",35:"DECREMENTO",36:"valo_numerico",37:"RVOID",40:"MAS",41:"CADENA",44:"MENOS",45:"MULTIPLICACION",46:"DIVISION",47:"MODULO",48:"POTENCIA",52:"COMA",54:"RDOUBLE",55:"RBOOLEAN",56:"RCHAR",57:"RSTRING",59:"RBREAK",60:"RRETURN",61:"expresionCadena",62:"RCONTINUE",63:"ENTERO",64:"DECIMAL",65:"RTRUE",66:"RFALSE",68:"IGUALDAD",69:"DISTINTO",70:"MAYOR",71:"MENOR",72:"MAYORIGUAL",73:"MENORIGUAL",74:"AND",75:"OR",76:"NOT",78:"RCASE",79:"DOSPTS",80:"RDEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,5],[6,5],[6,4],[6,3],[6,3],[6,5],[6,3],[6,8],[6,6],[6,7],[6,5],[6,7],[6,5],[6,6],[6,14],[6,14],[6,13],[6,13],[6,5],[6,6],[6,5],[6,6],[6,2],[6,1],[9,3],[9,1],[9,1],[9,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,1],[43,3],[43,1],[43,1],[43,1],[49,4],[49,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,2],[51,1],[51,1],[51,1],[51,1],[50,3],[50,1],[53,1],[53,1],[53,1],[53,1],[53,1],[18,1],[18,1],[18,1],[18,1],[18,1],[19,3],[19,1],[58,1],[58,2],[58,1],[32,1],[32,1],[42,1],[42,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[67,1],[67,1],[67,1],[22,3],[22,3],[22,6],[22,6],[22,2],[22,1],[27,2],[27,1],[77,4],[77,6],[77,3],[77,5],[23,3],[23,2],[24,7],[24,6],[39,2],[39,2],[38,4],[38,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 70: case 95:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = instruccionesAPI.nuevoPrintln($$[$0-2]); 
break;
case 5:
 this.$ = instruccionesAPI.nuevoPrint($$[$0-2]); 
break;
case 6:
 this.$ = instruccionesAPI.nuevaClaseInstrucciones($$[$0-3],$$[$0-1]); 
break;
case 7:
 this.$ = instruccionesAPI.nuevaClase($$[$0-2]); 
break;
case 8:
 this.$ = instruccionesAPI.nuevoImport($$[$0-1]); 
break;
case 9:
 this.$ = instruccionesAPI.nuevoDeclaracionVar($$[$0-1],$$[$0-2]); 
break;
case 10:
 this.$ = instruccionesAPI.nuevoDeclaracionVarValor($$[$0-3],$$[$0-4],$$[$0-1]); 
break;
case 11:
 this.$ = instruccionesAPI.nuevaAsignacion($$[$0-2],$$[$0]); 
break;
case 12:
 this.$ = instruccionesAPI.nuevoIfElseListElseIf($$[$0-5],$$[$0-3],$$[$0],$$[$0-2]); 
break;
case 13:
 this.$ = instruccionesAPI.nuevoIfListElseIf($$[$0-3],$$[$0-1],$$[$0]); 
break;
case 14:
 this.$ = instruccionesAPI.nuevoElse($$[$0-4],$$[$0-2],$$[$0]); 
break;
case 15:
 this.$ = instruccionesAPI.nuevoIf($$[$0-2],$$[$0]); 
break;
case 16:
 this.$ = instruccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]); 
break;
case 17:
 this.$ = instruccionesAPI.nuevoWhile($$[$0-2],$$[$0]); 
break;
case 18:
 this.$ = instruccionesAPI.nuevoDoWhile($$[$0-1],$$[$0-4]); 
break;
case 19: case 20: case 21: case 22:
 this.$ = instruccionesAPI.nuevoFor($$[$0-10],$$[$0-8],$$[$0-6],$$[$0-3],$$[$0]); 
break;
case 23: case 25:
 this.$ = instruccionesAPI.nuevaDeclaracionFun($$[$0-4],$$[$0-3],$$[$0]); 
break;
case 24: case 26:
 this.$ = instruccionesAPI.nuevaDeclaracionFunParametros($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 27: case 39: case 51:
 this.$ = $$[$0-1]; 
break;
case 28:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 29: case 45:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA); 
break;
case 30: case 60:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.CADENA); 
break;
case 31: case 32: case 38: case 40: case 42: case 53: case 54: case 56: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 71: case 73: case 84: case 86: case 87: case 93:
 this.$ = $$[$0]; 
break;
case 33: case 46:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA); 
break;
case 34: case 47:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION); 
break;
case 35: case 48:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION); 
break;
case 36: case 49:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO); 
break;
case 37: case 50:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA); 
break;
case 41: case 55: case 59:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR); 
break;
case 43:
 this.$ = instruccionesAPI.nuevaInstanciaParametros($$[$0-3],$$[$0-1]); 
break;
case 44:
 this.$ = instruccionesAPI.nuevaInstancia($$[$0-2]); 
break;
case 52:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO); 
break;
case 57:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 58:
 this.$ = [$$[$0]]
break;
case 69:
 $$[$0-2].push($$[$0]);  this.$ = $$[$0-2]; 
break;
case 72:
 this.$ = instruccionesAPI.nuevoReturn($$[$0]); 
break;
case 74: case 75:
 this.$ = instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.NUMERO); 
break;
case 76: case 77:
 this.$ = instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.BOOLEAN); 
break;
case 78:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUALDAD); 
break;
case 79:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DISTINTO); 
break;
case 80:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_QUE); 
break;
case 81:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_QUE); 
break;
case 82:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_IGUAL); 
break;
case 83:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_IGUAL); 
break;
case 85:
 this.$ = instruccionesAPI.nuevoValor($$[$0], TIPO_VALOR.CADENA); 
break;
case 88:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.AND); 
break;
case 89:
 this.$ = instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.OR); 
break;
case 90:
 this.$ = instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.AND), TIPO_OPERACION.NOT); 
break;
case 91:
 this.$ = instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevaOperacionBinaria($$[$0-3],$$[$0-1], TIPO_OPERACION.OR), TIPO_OPERACION.NOT); 
break;
case 92:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.NOT); 
break;
case 94:
 $$[$0-1].push($$[$0]); this.$ =$$[$0-1]; 
break;
case 96:
 this.$ = instruccionesAPI.nuevoCase($$[$0-2],$$[$0]); 
break;
case 97:
 this.$  = instruccionesAPI.nuevoCaseTransferencia($$[$0-4],$$[$0-2],$$[$0-1]); 
break;
case 98:
 this.$ = instruccionesAPI.nuevoDefault($$[$0]); 
break;
case 99:
 this.$ = instruccionesAPI.nuevoDefaultTransferencia($$[$0-2],$$[$0-1]); 
break;
case 100:
 this.$ = instruccionesAPI.nuevoBloqueSentencias($$[$0-1]); 
break;
case 101:
 this.$ = instruccionesAPI.nuevoBloqueSentencias(undefined) 
break;
case 102:
 $$[$0-6].push(instruccionesAPI.nuevoIf($$[$0-2],$$[$0])); this.$ = $$[$0-6]; 
break;
case 103:
 this.$ = [instruccionesAPI.nuevoIf($$[$0-2],$$[$0])]; 
break;
case 104:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0-1],TIPO_OPERACION.INCREMENTO); 
break;
case 105:
 this.$ = instruccionesAPI.nuevaOperacionUnaria($$[$0-1],TIPO_OPERACION.DECREMENTO); 
break;
case 106:
 $$[$0-3].push(instruccionesAPI.nuevoParametroFun($$[$0-1],$$[$0])); this.$ = $$[$0-3] 
break;
case 107:
 this.$ = [instruccionesAPI.nuevoParametroFun($$[$0-1],$$[$0])]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,18:8,21:$V6,26:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,37:$Vc,39:16,54:$Vd,55:$Ve,56:$Vf,57:$Vg},{1:[3]},{2:$V0,5:[1,23],6:24,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,18:8,21:$V6,26:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,37:$Vc,39:16,54:$Vd,55:$Ve,56:$Vf,57:$Vg},o($Vh,[2,3]),{8:[1,25]},{8:[1,26]},{14:[1,27]},{14:[1,28]},{14:[1,30],19:29},{20:[1,31],34:$Vi,35:$Vj},{8:[1,34]},{8:[1,35]},{8:[1,36]},{15:$Vk,23:37},{8:[1,39]},{14:[1,40]},{11:[1,41]},o($Vh,[2,28]),{14:[2,64]},{14:[2,65]},{14:[2,66]},{14:[2,67]},{14:[2,68]},{1:[2,1]},o($Vh,[2,2]),{8:$Vl,9:42,14:$Vm,32:50,39:48,41:$Vn,42:44,43:45,49:52,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{8:$Vl,9:55,14:$Vm,32:50,39:48,41:$Vn,42:44,43:45,49:52,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{15:[1,56]},{11:[1,57]},{11:[1,58],20:[1,59],52:[1,60]},o($Vs,[2,70],{8:[1,61]}),{8:$Vl,9:62,14:$Vm,32:50,39:48,41:$Vn,42:44,43:45,49:52,63:$Vo,64:$Vp,65:$Vq,66:$Vr},o($Vt,[2,104]),o($Vt,[2,105]),{8:$Vu,14:$Vv,22:63,32:73,33:65,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66,76:$Vy},{8:$Vl,9:76,14:$Vm,32:50,39:48,41:$Vn,42:44,43:45,49:52,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{8:$Vu,14:$Vv,22:77,32:73,33:65,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66,76:$Vy},{28:[1,78]},{2:$V0,4:79,6:3,7:$V1,12:$V2,13:$V3,14:$V4,16:[1,80],17:$V5,18:8,21:$V6,26:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,37:$Vc,39:16,54:$Vd,55:$Ve,56:$Vf,57:$Vg},{14:[1,82],31:[1,81]},{8:[1,83]},o($Vh,[2,27]),{10:[1,84],40:$Vz},o($VA,[2,30]),o($VA,[2,31]),o($VA,[2,32],{44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VG,[2,76]),o($VG,[2,77]),o($VH,[2,38]),{8:$Vl,14:$Vm,32:50,39:48,43:91,49:52,63:$Vo,64:$Vp},o($VH,[2,40]),o($VH,[2,41],{8:$VI,34:$Vi,35:$Vj}),o($VH,[2,42]),o($VJ,[2,74]),o($VJ,[2,75]),{10:[1,93],40:$Vz},{2:$V0,4:94,6:3,7:$V1,12:$V2,13:$V3,14:$V4,16:[1,95],17:$V5,18:8,21:$V6,26:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,37:$Vc,39:16,54:$Vd,55:$Ve,56:$Vf,57:$Vg},o($Vh,[2,8]),o($Vh,[2,9]),{8:$Vl,9:96,14:$Vm,32:50,39:48,41:$Vn,42:44,43:45,49:52,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{14:[1,97]},{10:[1,98],18:100,31:$Vb,38:99,54:$Vd,55:$Ve,56:$Vf,57:$Vg},o($Vh,[2,11],{40:$Vz}),{10:[1,101],74:$VK,75:$VL},{8:[1,104],14:$Vv,32:73,33:105,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66},o($VM,[2,93]),o($VN,[2,84],{68:[1,106],69:[1,107],70:[1,108],71:[1,109],72:[1,110],73:[1,111]}),o($VO,[2,85]),o($VO,[2,86]),o($VO,$VP,{40:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV}),{8:$Vu,14:$Vv,32:73,39:72,44:$Vx,49:75,51:118,63:$Vo,64:$Vp},{8:$Vu,14:$Vv,32:73,39:72,44:$Vx,49:75,51:119,63:$Vo,64:$Vp},o($VW,[2,53]),o($VW,[2,54]),o($VW,[2,55],{8:$VI,34:$Vi,35:$Vj}),o($VW,[2,56]),{10:[1,120],40:$Vz},{10:[1,121],74:$VK,75:$VL},{8:[1,122]},{2:$V0,6:24,7:$V1,12:$V2,13:$V3,14:$V4,16:[1,123],17:$V5,18:8,21:$V6,26:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,37:$Vc,39:16,54:$Vd,55:$Ve,56:$Vf,57:$Vg},o($VX,[2,101]),{14:[1,124]},{20:[1,125]},{10:[1,126],18:100,31:$Vb,38:127,54:$Vd,55:$Ve,56:$Vf,57:$Vg},{11:[1,128]},{8:$Vl,9:129,14:$Vm,32:50,39:48,41:$Vn,42:44,43:45,49:52,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{8:$Vl,14:$Vm,32:50,39:48,43:130,49:52,63:$Vo,64:$Vp},{8:$Vl,14:$Vm,32:50,39:48,43:131,49:52,63:$Vo,64:$Vp},{8:$Vl,14:$Vm,32:50,39:48,43:132,49:52,63:$Vo,64:$Vp},{8:$Vl,14:$Vm,32:50,39:48,43:133,49:52,63:$Vo,64:$Vp},{8:$Vl,14:$Vm,32:50,39:48,43:134,49:52,63:$Vo,64:$Vp},{10:[1,135],44:$VB,45:$VC,46:$VD,47:$VE,48:$VF},{10:[1,137],14:$VY,32:141,41:$VZ,42:142,49:143,50:136,53:138,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{11:[1,144]},{2:$V0,6:24,7:$V1,12:$V2,13:$V3,14:$V4,16:[1,145],17:$V5,18:8,21:$V6,26:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,37:$Vc,39:16,54:$Vd,55:$Ve,56:$Vf,57:$Vg},o($Vh,[2,7]),{11:[1,146],40:$Vz},o($Vs,[2,69]),{15:$Vk,23:147},{10:[1,148],52:$V_},{14:[1,150]},{15:$Vk,23:151},{8:$Vu,14:$Vv,32:73,33:152,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66},{8:$Vu,14:$Vv,32:73,33:153,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66},{8:$Vu,14:$Vv,22:154,32:73,33:65,39:72,41:$Vw,42:68,44:$Vx,49:75,51:155,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66,76:$Vy},o($VM,[2,92]),{8:$Vu,14:$Vv,32:73,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:156},{8:$Vu,14:$Vv,32:73,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:157},{8:$Vu,14:$Vv,32:73,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:158},{8:$Vu,14:$Vv,32:73,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:159},{8:$Vu,14:$Vv,32:73,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:160},{8:$Vu,14:$Vv,32:73,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:161},{8:$Vu,14:$Vv,32:73,39:72,44:$Vx,49:75,51:162,63:$Vo,64:$Vp},{8:$Vu,14:$Vv,32:73,39:72,44:$Vx,49:75,51:163,63:$Vo,64:$Vp},{8:$Vu,14:$Vv,32:73,39:72,44:$Vx,49:75,51:164,63:$Vo,64:$Vp},{8:$Vu,14:$Vv,32:73,39:72,44:$Vx,49:75,51:165,63:$Vo,64:$Vp},{8:$Vu,14:$Vv,32:73,39:72,44:$Vx,49:75,51:166,63:$Vo,64:$Vp},{8:$Vu,14:$Vv,32:73,39:72,44:$Vx,49:75,51:167,63:$Vo,64:$Vp},{10:$V$,40:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV},o($V01,[2,52],{45:$VS,46:$VT,47:$VU,48:$VV}),{15:[1,169]},{15:$Vk,23:170},{8:$Vu,14:$Vv,22:171,32:73,33:65,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66,76:$Vy},o($VX,[2,100]),{20:[1,172]},{36:[1,173]},{15:$Vk,23:174},{10:[1,175],52:$V_},o($Vh,[2,4]),o($VA,[2,29]),o([2,5,7,10,11,12,13,14,16,17,21,26,28,29,30,31,37,40,44,54,55,56,57,59,60,62,78,79,80],[2,33],{45:$VC,46:$VD,47:$VE,48:$VF}),o($VH,[2,34]),o($VH,[2,35]),o($VH,[2,36]),o($VH,[2,37]),o($VH,[2,39]),{10:[1,176],52:[1,177]},o($VJ,[2,44]),o($V11,[2,58]),o($V11,[2,59],{8:$VI}),o($V11,[2,60]),o($V11,[2,61]),o($V11,[2,62]),o($V11,[2,63]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,10]),o($Vh,[2,25]),{15:$Vk,23:178},{18:179,31:$Vb,54:$Vd,55:$Ve,56:$Vf,57:$Vg},o($V11,[2,107]),o($Vh,[2,15],{24:180,25:[1,181]}),o($VM,$V21),o($VM,$V31),{74:[1,182],75:[1,183]},o([68,69,70,71,72,73,74,75],$VP,{10:$V$,40:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV}),o($VN,[2,78]),o($VN,[2,79]),o($VN,[2,80]),o($VN,[2,81]),o($VN,[2,82]),o($VN,[2,83]),o($V01,[2,45],{45:$VS,46:$VT,47:$VU,48:$VV}),o($V01,[2,46],{45:$VS,46:$VT,47:$VU,48:$VV}),o($VW,[2,47]),o($VW,[2,48]),o($VW,[2,49]),o($VW,[2,50]),o($VW,[2,51]),{27:184,77:185,78:$V41,80:$V51},o($Vh,[2,17]),{10:[1,188],74:$VK,75:$VL},{32:189,63:$Vo,64:$Vp},{11:[1,190]},o($Vh,[2,23]),{15:$Vk,23:191},o($VJ,[2,43]),{14:$VY,32:141,41:$VZ,42:142,49:143,53:192,63:$Vo,64:$Vp,65:$Vq,66:$Vr},o($Vh,[2,26]),{14:[1,193]},o($Vh,[2,13],{25:[1,194]}),{15:$Vk,21:[1,196],23:195},{8:$Vu,14:$Vv,32:73,33:197,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66},{8:$Vu,14:$Vv,32:73,33:198,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66},{16:[1,199],77:200,78:$V41,80:$V51},o($V61,[2,95]),{8:$Vl,9:201,14:$Vm,32:50,39:48,41:$Vn,42:44,43:45,49:52,63:$Vo,64:$Vp,65:$Vq,66:$Vr},{79:[1,202]},o($Vh,[2,18]),{11:[1,203]},{8:$Vu,14:$Vv,32:73,33:204,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66},o($Vh,[2,24]),o($V11,[2,57]),o($V11,[2,106]),{15:$Vk,21:[1,206],23:205},o($Vh,[2,14]),{8:[1,207]},o($V71,$V21,{10:[1,208]}),o($V71,$V31,{10:[1,209]}),o($Vh,[2,16]),o($V61,[2,94]),{40:$Vz,79:[1,210]},{2:$V0,4:211,6:3,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,18:8,21:$V6,26:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,37:$Vc,39:16,54:$Vd,55:$Ve,56:$Vf,57:$Vg},{8:$Vu,14:$Vv,32:73,33:212,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66},{11:[1,213]},o($Vh,[2,12]),{8:[1,214]},{8:$Vu,14:$Vv,22:215,32:73,33:65,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66,76:$Vy},o($VM,[2,90]),o($VM,[2,91]),{2:$V0,4:216,6:3,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,18:8,21:$V6,26:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,37:$Vc,39:16,54:$Vd,55:$Ve,56:$Vf,57:$Vg},o($V61,[2,98],{18:8,39:16,6:24,58:217,2:$V0,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,21:$V6,26:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,37:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,59:$V81,60:$V91,62:$Va1}),{11:[1,221]},{14:[1,222]},{8:$Vu,14:$Vv,22:223,32:73,33:65,39:72,41:$Vw,42:68,44:$Vx,49:75,51:69,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:66,76:$Vy},{10:[1,224],74:$VK,75:$VL},o($V61,[2,96],{18:8,39:16,6:24,58:225,2:$V0,7:$V1,12:$V2,13:$V3,14:$V4,17:$V5,21:$V6,26:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,37:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,59:$V81,60:$V91,62:$Va1}),{11:[1,226]},{11:[2,71]},{61:[1,227]},{11:[2,73]},{14:[1,228]},{34:[1,229],35:[1,230]},{10:[1,231],74:$VK,75:$VL},{15:$Vk,23:232},{11:[1,233]},o($V61,[2,99]),{11:[2,72]},{34:[1,234],35:[1,235]},{11:[1,236]},{11:[1,237]},{15:$Vk,23:238},o($VX,[2,103]),o($V61,[2,97]),{11:[1,239]},{11:[1,240]},{10:[1,241]},{10:[1,242]},o($VX,[2,102]),{10:[1,243]},{10:[1,244]},{15:$Vk,23:245},{15:$Vk,23:246},{15:$Vk,23:247},{15:$Vk,23:248},o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,19]),o($Vh,[2,20])],
defaultActions: {18:[2,64],19:[2,65],20:[2,66],21:[2,67],22:[2,68],23:[2,1],218:[2,71],220:[2,73],227:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const TIPO_VALOR = require('../js/instrucciones').TIPO_VALOR;
  const TIPO_OPERACION = require('../js/instrucciones').TIPO_OPERACION;
  const instruccionesAPI = require('../js/instrucciones').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORAR */
break;
case 1:/* IGNORAR COMENTARIO */
break;
case 2:/* IGNORAR COMENTARIO */
break;
case 3:return 31;
break;
case 4:return 54;
break;
case 5:return 55;
break;
case 6:return 56;
break;
case 7:return 57;
break;
case 8:return 'SALTOLINEA';
break;
case 9:return 'TABULADOR';
break;
case 10:return 'RETORNO';
break;
case 11:return 'BARRAINVER';
break;
case 12:return 'COMILLADOBLE';
break;
case 13:return 34;
break;
case 14:return 35;
break;
case 15:return 40;
break;
case 16:return 44;
break;
case 17:return 45;
break;
case 18:return 46;
break;
case 19:return 48;
break;
case 20:return 47;
break;
case 21:return 68;
break;
case 22:return 69;
break;
case 23:return 72;
break;
case 24:return 70;
break;
case 25:return 73;
break;
case 26:return 71;
break;
case 27:return 74;
break;
case 28:return 75;
break;
case 29:return 76;
break;
case 30:return 13;
break;
case 31:return 17;
break;
case 32:return 21;
break;
case 33:return 25;
break;
case 34:return 26;
break;
case 35:return 78;
break;
case 36:return 80;
break;
case 37:return 59;
break;
case 38:return 60;
break;
case 39:return 28;
break;
case 40:return 29;
break;
case 41:return 30;
break;
case 42:return 62;
break;
case 43:return 37;
break;
case 44:return 7;
break;
case 45:return 12;
break;
case 46:return 'RPUBLIC';
break;
case 47:return 'RPRIVATE';
break;
case 48:return 'RPROTECTED';
break;
case 49:return 'RSTATIC';
break;
case 50:return 'RMAIN';
break;
case 51:return 'RARGS';
break;
case 52:return 65;
break;
case 53:return 66;
break;
case 54:return 15;
break;
case 55:return 16;
break;
case 56:return 'CORIZQ';
break;
case 57:return 'CORDER';
break;
case 58:return 20;
break;
case 59:return "COMA";
break;
case 60:return 11;
break;
case 61:return 79;
break;
case 62:return 8;
break;
case 63:return 10;
break;
case 64:return 64;
break;
case 65:return 63;
break;
case 66:return 14;
break;
case 67: yy_.yytext = yy_.yytext.substr( 1 , yy_.yyleng-2 ); return 41; 
break;
case 68:return 5;
break;
case 69:console.error('Este es un error l√©xico: \"' + yy_.yytext + '\", en la linea: '+ yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:\\n)/,/^(?:\\t)/,/^(?:\\r)/,/^(?:\\\\)/,/^(?:\\")/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:args\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:"[^\"]*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}